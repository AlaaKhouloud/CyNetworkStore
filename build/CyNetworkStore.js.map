{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///CyNetworkStore.js","webpack:///webpack/bootstrap afe6e04c25fee54549e3","webpack:///./src/CyNetworkStore.js","webpack:///./src/store/networks.js","webpack:///./~/immutable/dist/immutable.js","webpack:///./src/store/networkDownload.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","defineProperty","value","networkDownloadActions","networkActions","store","storeName","undefined","_networks","_networkDownload","networks","networkDownload","networkStore","state","arguments","length","defaultState","action","type","ADD_NETWORK","set","networkId","_immutable","Map","data","DELETE_NETWORK","addNetwork","deleteNetwork","global","createClass","ctor","superClass","create","constructor","Iterable","isIterable","Seq","KeyedIterable","isKeyed","KeyedSeq","IndexedIterable","isIndexed","IndexedSeq","SetIterable","isAssociative","SetSeq","maybeIterable","IS_ITERABLE_SENTINEL","maybeKeyed","IS_KEYED_SENTINEL","maybeIndexed","IS_INDEXED_SENTINEL","maybeAssociative","isOrdered","maybeOrdered","IS_ORDERED_SENTINEL","MakeRef","ref","SetRef","OwnerID","arrCopy","arr","offset","len","Math","max","newArr","Array","ii","ensureSize","iter","size","__iterate","returnTrue","wrapIndex","index","uint32Index","NaN","wholeSlice","begin","end","resolveBegin","resolveIndex","resolveEnd","defaultIndex","min","Iterator","next","iteratorValue","k","v","iteratorResult","done","iteratorDone","hasIterator","getIteratorFn","isIterator","maybeIterator","getIterator","iterable","iteratorFn","REAL_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","isArrayLike","emptySequence","toSeq","seqFromValue","toKeyedSeq","fromEntrySeq","keyedSeqFromValue","entrySeq","toIndexedSeq","indexedSeqFromValue","toSetSeq","ArraySeq","array","_array","ObjectSeq","object","keys","_object","_keys","IterableSeq","_iterable","IteratorSeq","iterator","_iterator","_iteratorCache","isSeq","maybeSeq","IS_SEQ_SENTINEL","EMPTY_SEQ","seq","isArray","TypeError","maybeIndexedSeqFromValue","seqIterate","fn","reverse","useKeys","cache","_cache","maxIndex","entry","__iterateUncached","seqIterator","__iteratorUncached","fromJS","json","converter","fromJSWith","","fromJSDefault","parentJSON","map","isPlainObj","toList","toMap","is","valueA","valueB","valueOf","equals","deepEqual","a","b","__hash","notAssociative","entries","every","flipped","cacheResult","_","allEqual","bSize","has","get","NOT_SET","Repeat","times","_value","Infinity","EMPTY_REPEAT","invariant","condition","error","Error","Range","start","step","abs","_start","_end","_step","ceil","EMPTY_RANGE","Collection","KeyedCollection","IndexedCollection","SetCollection","smi","i32","hash","o","h","STRING_HASH_CACHE_MIN_STRLEN","cachedHashString","hashString","hashCode","hashJSObj","toString","string","stringHashCache","STRING_HASH_CACHE_SIZE","STRING_HASH_CACHE_MAX_SIZE","charCodeAt","usingWeakMap","weakMap","UID_HASH_KEY","canDefineProperty","propertyIsEnumerable","getIENodeHash","objHashUID","isExtensible","enumerable","configurable","writable","apply","nodeType","node","uniqueID","documentElement","assertNotInfinite","emptyMap","isMap","withMutations","forEach","maybeMap","IS_MAP_SENTINEL","ArrayMapNode","ownerID","BitmapIndexedNode","bitmap","nodes","HashArrayMapNode","count","HashCollisionNode","keyHash","ValueNode","MapIterator","_type","_reverse","_stack","_root","mapIteratorFrame","mapIteratorValue","prev","__prev","makeMap","MapPrototype","__ownerID","__altered","EMPTY_MAP","updateMap","newRoot","newSize","didChangeSize","CHANGE_LENGTH","didAlter","DID_ALTER","updateNode","shift","update","isLeafNode","mergeIntoNode","newNode","idx1","MASK","idx2","SHIFT","createNodes","packNodes","excluding","packedII","packedNodes","bit","expandNodes","including","expandedNodes","SIZE","mergeIntoMapWith","merger","iterables","iters","push","mergeIntoCollectionWith","deepMerger","existing","mergeDeep","deepMergerWith","mergeDeepWith","nextValue","collection","filter","x","mergeIntoMap","updateInDeepMap","keyPathIter","notSetValue","updater","isNotSet","existingValue","newValue","nextExisting","nextUpdated","remove","popCount","setIn","idx","val","canEdit","newArray","spliceIn","newLen","after","spliceOut","pop","List","empty","emptyList","isList","makeList","VNode","toArray","list","setSize","i","maybeList","IS_LIST_SENTINEL","iterateList","iterateNodeOrLeaf","level","iterateLeaf","iterateNode","tailPos","tail","from","left","to","right","DONE","values","_origin","_capacity","getTailOffset","_tail","_level","origin","capacity","ListPrototype","EMPTY_LIST","updateList","setListBounds","newTail","updateVNode","nodeHas","lowerNode","newLowerNode","editableVNode","slice","listNodeFor","rawIndex","owner","oldOrigin","oldCapacity","newOrigin","newCapacity","clear","newLevel","offsetShift","oldTailOffset","newTailOffset","oldTail","removeAfter","removeBefore","beginIndex","mergeIntoListWith","maxSize","OrderedMap","emptyOrderedMap","isOrderedMap","maybeOrderedMap","makeOrderedMap","omap","_map","_list","EMPTY_ORDERED_MAP","updateOrderedMap","newMap","newList","flip","ToKeyedSequence","indexed","_iter","_useKeys","ToIndexedSequence","ToSetSequence","FromEntriesSequence","flipFactory","flipSequence","makeSequence","reversedSequence","includes","cacheResultThrough","this$0","ITERATE_ENTRIES","__iterator","ITERATE_VALUES","ITERATE_KEYS","mapFactory","mapper","context","mappedSequence","reverseFactory","filterFactory","predicate","filterSequence","iterations","countByFactory","grouper","groups","asMutable","asImmutable","groupByFactory","isKeyedIter","coerce","iterableClass","reify","sliceFactory","originalSize","resolvedBegin","resolvedEnd","sliceSize","resolvedSize","sliceSeq","skipped","isSkipping","takeWhileFactory","takeSequence","iterating","skipWhileFactory","skipSequence","skipping","concatFactory","isKeyedIterable","concat","singleton","concatSeq","flatten","reduce","sum","flattenFactory","depth","flatSequence","flatDeep","currentDepth","stopped","stack","flatMapFactory","interposeFactory","separator","interposedSequence","sortFactory","comparator","defaultComparator","sort","maxFactory","maxCompare","comp","zipWithFactory","keyIter","zipper","zipSequence","iterators","isDone","steps","some","s","validateEntry","resolveSize","forceIterator","keyPath","Record","defaultValues","name","hasInitialized","RecordType","setProps","RecordTypePrototype","_name","_defaultValues","RecordPrototype","makeRecord","likeRecord","record","getPrototypeOf","recordName","names","setProp","bind","Set","emptySet","isSet","add","maybeSet","IS_SET_SENTINEL","updateSet","__empty","__make","makeSet","SetPrototype","EMPTY_SET","OrderedSet","emptyOrderedSet","isOrderedSet","maybeOrderedSet","makeOrderedSet","OrderedSetPrototype","EMPTY_ORDERED_SET","Stack","emptyStack","isStack","unshiftAll","maybeStack","IS_STACK_SENTINEL","makeStack","head","StackPrototype","_head","EMPTY_STACK","mixin","methods","keyCopier","getOwnPropertySymbols","keyMapper","entryMapper","not","neg","quoteString","JSON","stringify","String","defaultZipper","defaultNegComparator","hashIterable","ordered","keyed","hashMerge","murmurHashOfSize","imul","SLICE$0","Keyed","Indexed","DELETE","Symbol","ITERATOR_SYMBOL","KEYS","VALUES","ENTRIES","inspect","toSource","of","__toString","searchValue","indexOf","lastIndexOf","other","possibleIndex","floor","offsetValue","d","e","WeakMap","keyValues","updateIn","deleteIn","updatedValue","merge","mergeWith","mergeIn","mergeDeepIn","sortBy","mutable","wasAltered","__ensureOwner","iterate","removeIn","removed","exists","MAX_ARRAY_MAP_SIZE","isEditable","newEntries","keyHashFrag","MAX_BITMAP_INDEXED_SIZE","newBitmap","newNodes","newCount","MIN_HASH_ARRAY_MAP_SIZE","keyMatch","subNode","splice","insert","oldSize","unshift","originIndex","newChild","removingFirst","oldChild","editable","sizeIndex","valueSeq","indexedIterable","defaultVal","_empty","fromKeys","keySeq","union","intersect","originalSet","subtract","peek","pushAll","toJS","__toJS","toJSON","toObject","toOrderedMap","toOrderedSet","toSet","toStack","__toStringMapper","join","returnValue","find","findEntry","sideEffect","joined","isFirst","reducer","initialReduction","reduction","useFirst","reduceRight","reversed","butLast","isEmpty","countBy","entriesSequence","filterNot","found","findKey","findLast","findLastEntry","findLastKey","first","flatMap","searchKey","getIn","searchKeyPath","nested","groupBy","hasIn","isSubset","isSuperset","keyOf","last","lastKeyOf","maxBy","minBy","rest","skip","amount","skipLast","skipWhile","skipUntil","take","takeLast","takeWhile","takeUntil","IterablePrototype","chain","contains","mapEntries","mapKeys","KeyedIterablePrototype","findIndex","removeNum","numArgs","spliced","findLastIndex","interpose","interleave","zipped","interleaved","zip","zipWith","Immutable","downloadState","DOWNLOAD_BEGIN","downloading","DOWNLOAD_SUCCESS","DOWNLOAD_ERROR","downloadBegin","downloadSuccess","networkUrl","dispatch","downloadError","download","headers","Accept","Content-Type","fetch","method","then","response","status","window","alert"],"mappings":"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","file":"CyNetworkStore.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CyNetworkStore\"] = factory();\n\telse\n\t\troot[\"CyNetworkStore\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CyNetworkStore\"] = factory();\n\telse\n\t\troot[\"CyNetworkStore\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.networkDownloadActions = exports.networkActions = exports.store = exports.storeName = undefined;\n\t\n\tvar _networks = __webpack_require__(1);\n\t\n\tvar networkActions = _interopRequireWildcard(_networks);\n\t\n\tvar _networkDownload = __webpack_require__(3);\n\t\n\tvar networkDownloadActions = _interopRequireWildcard(_networkDownload);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tvar storeName = 'cy_network';\n\tvar store = { networks: networkActions.default, networkDownload: networkDownloadActions.default };\n\t\n\texports.storeName = storeName;\n\texports.store = store;\n\texports.networkActions = networkActions;\n\texports.networkDownloadActions = networkDownloadActions;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = networkStore;\n\texports.addNetwork = addNetwork;\n\texports.deleteNetwork = deleteNetwork;\n\t\n\tvar _immutable = __webpack_require__(2);\n\t\n\tvar ADD_NETWORK = 'ADD_NETWORK';\n\tvar DELETE_NETWORK = 'DELETE_NETWORK';\n\t\n\tvar defaultState = (0, _immutable.Map)({});\n\t\n\tfunction networkStore() {\n\t  var state = arguments.length <= 0 || arguments[0] === undefined ? defaultState : arguments[0];\n\t  var action = arguments[1];\n\t\n\t  switch (action.type) {\n\t    case ADD_NETWORK:\n\t      return state.set(action.networkId, (0, _immutable.Map)(action.data));\n\t    case DELETE_NETWORK:\n\t      return state.delete(action.networkId);\n\t    default:\n\t      return state;\n\t  }\n\t}\n\t\n\tfunction addNetwork(networkId, data) {\n\t  return {\n\t    type: ADD_NETWORK,\n\t    networkId: networkId,\n\t    data: data\n\t  };\n\t}\n\t\n\tfunction deleteNetwork(networkId) {\n\t  return {\n\t    type: DELETE_NETWORK,\n\t    networkId: networkId\n\t  };\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t *  Copyright (c) 2014-2015, Facebook, Inc.\n\t *  All rights reserved.\n\t *\n\t *  This source code is licensed under the BSD-style license found in the\n\t *  LICENSE file in the root directory of this source tree. An additional grant\n\t *  of patent rights can be found in the PATENTS file in the same directory.\n\t */\n\t\n\t(function (global, factory) {\n\t   true ? module.exports = factory() :\n\t  typeof define === 'function' && define.amd ? define(factory) :\n\t  (global.Immutable = factory());\n\t}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\t\n\t  function createClass(ctor, superClass) {\n\t    if (superClass) {\n\t      ctor.prototype = Object.create(superClass.prototype);\n\t    }\n\t    ctor.prototype.constructor = ctor;\n\t  }\n\t\n\t  function Iterable(value) {\n\t      return isIterable(value) ? value : Seq(value);\n\t    }\n\t\n\t\n\t  createClass(KeyedIterable, Iterable);\n\t    function KeyedIterable(value) {\n\t      return isKeyed(value) ? value : KeyedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(IndexedIterable, Iterable);\n\t    function IndexedIterable(value) {\n\t      return isIndexed(value) ? value : IndexedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(SetIterable, Iterable);\n\t    function SetIterable(value) {\n\t      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n\t    }\n\t\n\t\n\t\n\t  function isIterable(maybeIterable) {\n\t    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n\t  }\n\t\n\t  function isKeyed(maybeKeyed) {\n\t    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n\t  }\n\t\n\t  function isIndexed(maybeIndexed) {\n\t    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n\t  }\n\t\n\t  function isAssociative(maybeAssociative) {\n\t    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n\t  }\n\t\n\t  function isOrdered(maybeOrdered) {\n\t    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n\t  }\n\t\n\t  Iterable.isIterable = isIterable;\n\t  Iterable.isKeyed = isKeyed;\n\t  Iterable.isIndexed = isIndexed;\n\t  Iterable.isAssociative = isAssociative;\n\t  Iterable.isOrdered = isOrdered;\n\t\n\t  Iterable.Keyed = KeyedIterable;\n\t  Iterable.Indexed = IndexedIterable;\n\t  Iterable.Set = SetIterable;\n\t\n\t\n\t  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  // Used for setting prototype methods that IE8 chokes on.\n\t  var DELETE = 'delete';\n\t\n\t  // Constants describing the size of trie nodes.\n\t  var SHIFT = 5; // Resulted in best performance after ______?\n\t  var SIZE = 1 << SHIFT;\n\t  var MASK = SIZE - 1;\n\t\n\t  // A consistent shared value representing \"not set\" which equals nothing other\n\t  // than itself, and nothing that could be provided externally.\n\t  var NOT_SET = {};\n\t\n\t  // Boolean references, Rough equivalent of `bool &`.\n\t  var CHANGE_LENGTH = { value: false };\n\t  var DID_ALTER = { value: false };\n\t\n\t  function MakeRef(ref) {\n\t    ref.value = false;\n\t    return ref;\n\t  }\n\t\n\t  function SetRef(ref) {\n\t    ref && (ref.value = true);\n\t  }\n\t\n\t  // A function which returns a value representing an \"owner\" for transient writes\n\t  // to tries. The return value will only ever equal itself, and will not equal\n\t  // the return of any subsequent call of this function.\n\t  function OwnerID() {}\n\t\n\t  // http://jsperf.com/copy-array-inline\n\t  function arrCopy(arr, offset) {\n\t    offset = offset || 0;\n\t    var len = Math.max(0, arr.length - offset);\n\t    var newArr = new Array(len);\n\t    for (var ii = 0; ii < len; ii++) {\n\t      newArr[ii] = arr[ii + offset];\n\t    }\n\t    return newArr;\n\t  }\n\t\n\t  function ensureSize(iter) {\n\t    if (iter.size === undefined) {\n\t      iter.size = iter.__iterate(returnTrue);\n\t    }\n\t    return iter.size;\n\t  }\n\t\n\t  function wrapIndex(iter, index) {\n\t    // This implements \"is array index\" which the ECMAString spec defines as:\n\t    //\n\t    //     A String property name P is an array index if and only if\n\t    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n\t    //     to 2^32−1.\n\t    //\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n\t    if (typeof index !== 'number') {\n\t      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n\t      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n\t        return NaN;\n\t      }\n\t      index = uint32Index;\n\t    }\n\t    return index < 0 ? ensureSize(iter) + index : index;\n\t  }\n\t\n\t  function returnTrue() {\n\t    return true;\n\t  }\n\t\n\t  function wholeSlice(begin, end, size) {\n\t    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n\t      (end === undefined || (size !== undefined && end >= size));\n\t  }\n\t\n\t  function resolveBegin(begin, size) {\n\t    return resolveIndex(begin, size, 0);\n\t  }\n\t\n\t  function resolveEnd(end, size) {\n\t    return resolveIndex(end, size, size);\n\t  }\n\t\n\t  function resolveIndex(index, size, defaultIndex) {\n\t    return index === undefined ?\n\t      defaultIndex :\n\t      index < 0 ?\n\t        Math.max(0, size + index) :\n\t        size === undefined ?\n\t          index :\n\t          Math.min(size, index);\n\t  }\n\t\n\t  /* global Symbol */\n\t\n\t  var ITERATE_KEYS = 0;\n\t  var ITERATE_VALUES = 1;\n\t  var ITERATE_ENTRIES = 2;\n\t\n\t  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\t  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\t\n\t  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\t\n\t\n\t  function Iterator(next) {\n\t      this.next = next;\n\t    }\n\t\n\t    Iterator.prototype.toString = function() {\n\t      return '[Iterator]';\n\t    };\n\t\n\t\n\t  Iterator.KEYS = ITERATE_KEYS;\n\t  Iterator.VALUES = ITERATE_VALUES;\n\t  Iterator.ENTRIES = ITERATE_ENTRIES;\n\t\n\t  Iterator.prototype.inspect =\n\t  Iterator.prototype.toSource = function () { return this.toString(); }\n\t  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n\t    return this;\n\t  };\n\t\n\t\n\t  function iteratorValue(type, k, v, iteratorResult) {\n\t    var value = type === 0 ? k : type === 1 ? v : [k, v];\n\t    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n\t      value: value, done: false\n\t    });\n\t    return iteratorResult;\n\t  }\n\t\n\t  function iteratorDone() {\n\t    return { value: undefined, done: true };\n\t  }\n\t\n\t  function hasIterator(maybeIterable) {\n\t    return !!getIteratorFn(maybeIterable);\n\t  }\n\t\n\t  function isIterator(maybeIterator) {\n\t    return maybeIterator && typeof maybeIterator.next === 'function';\n\t  }\n\t\n\t  function getIterator(iterable) {\n\t    var iteratorFn = getIteratorFn(iterable);\n\t    return iteratorFn && iteratorFn.call(iterable);\n\t  }\n\t\n\t  function getIteratorFn(iterable) {\n\t    var iteratorFn = iterable && (\n\t      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n\t      iterable[FAUX_ITERATOR_SYMBOL]\n\t    );\n\t    if (typeof iteratorFn === 'function') {\n\t      return iteratorFn;\n\t    }\n\t  }\n\t\n\t  function isArrayLike(value) {\n\t    return value && typeof value.length === 'number';\n\t  }\n\t\n\t  createClass(Seq, Iterable);\n\t    function Seq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        isIterable(value) ? value.toSeq() : seqFromValue(value);\n\t    }\n\t\n\t    Seq.of = function(/*...values*/) {\n\t      return Seq(arguments);\n\t    };\n\t\n\t    Seq.prototype.toSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    Seq.prototype.toString = function() {\n\t      return this.__toString('Seq {', '}');\n\t    };\n\t\n\t    Seq.prototype.cacheResult = function() {\n\t      if (!this._cache && this.__iterateUncached) {\n\t        this._cache = this.entrySeq().toArray();\n\t        this.size = this._cache.length;\n\t      }\n\t      return this;\n\t    };\n\t\n\t    // abstract __iterateUncached(fn, reverse)\n\t\n\t    Seq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, true);\n\t    };\n\t\n\t    // abstract __iteratorUncached(type, reverse)\n\t\n\t    Seq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, true);\n\t    };\n\t\n\t\n\t\n\t  createClass(KeyedSeq, Seq);\n\t    function KeyedSeq(value) {\n\t      return value === null || value === undefined ?\n\t        emptySequence().toKeyedSeq() :\n\t        isIterable(value) ?\n\t          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n\t          keyedSeqFromValue(value);\n\t    }\n\t\n\t    KeyedSeq.prototype.toKeyedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  createClass(IndexedSeq, Seq);\n\t    function IndexedSeq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n\t    }\n\t\n\t    IndexedSeq.of = function(/*...values*/) {\n\t      return IndexedSeq(arguments);\n\t    };\n\t\n\t    IndexedSeq.prototype.toIndexedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    IndexedSeq.prototype.toString = function() {\n\t      return this.__toString('Seq [', ']');\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, false);\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, false);\n\t    };\n\t\n\t\n\t\n\t  createClass(SetSeq, Seq);\n\t    function SetSeq(value) {\n\t      return (\n\t        value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value\n\t      ).toSetSeq();\n\t    }\n\t\n\t    SetSeq.of = function(/*...values*/) {\n\t      return SetSeq(arguments);\n\t    };\n\t\n\t    SetSeq.prototype.toSetSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  Seq.isSeq = isSeq;\n\t  Seq.Keyed = KeyedSeq;\n\t  Seq.Set = SetSeq;\n\t  Seq.Indexed = IndexedSeq;\n\t\n\t  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\t\n\t  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\t\n\t\n\t\n\t  createClass(ArraySeq, IndexedSeq);\n\t    function ArraySeq(array) {\n\t      this._array = array;\n\t      this.size = array.length;\n\t    }\n\t\n\t    ArraySeq.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterate = function(fn, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterator = function(type, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n\t      );\n\t    };\n\t\n\t\n\t\n\t  createClass(ObjectSeq, KeyedSeq);\n\t    function ObjectSeq(object) {\n\t      var keys = Object.keys(object);\n\t      this._object = object;\n\t      this._keys = keys;\n\t      this.size = keys.length;\n\t    }\n\t\n\t    ObjectSeq.prototype.get = function(key, notSetValue) {\n\t      if (notSetValue !== undefined && !this.has(key)) {\n\t        return notSetValue;\n\t      }\n\t      return this._object[key];\n\t    };\n\t\n\t    ObjectSeq.prototype.has = function(key) {\n\t      return this._object.hasOwnProperty(key);\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        if (fn(object[key], key, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterator = function(type, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, key, object[key]);\n\t      });\n\t    };\n\t\n\t  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(IterableSeq, IndexedSeq);\n\t    function IterableSeq(iterable) {\n\t      this._iterable = iterable;\n\t      this.size = iterable.length || iterable.size;\n\t    }\n\t\n\t    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      var iterations = 0;\n\t      if (isIterator(iterator)) {\n\t        var step;\n\t        while (!(step = iterator.next()).done) {\n\t          if (fn(step.value, iterations++, this) === false) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      if (!isIterator(iterator)) {\n\t        return new Iterator(iteratorDone);\n\t      }\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step : iteratorValue(type, iterations++, step.value);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(IteratorSeq, IndexedSeq);\n\t    function IteratorSeq(iterator) {\n\t      this._iterator = iterator;\n\t      this._iteratorCache = [];\n\t    }\n\t\n\t    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      while (iterations < cache.length) {\n\t        if (fn(cache[iterations], iterations++, this) === false) {\n\t          return iterations;\n\t        }\n\t      }\n\t      var step;\n\t      while (!(step = iterator.next()).done) {\n\t        var val = step.value;\n\t        cache[iterations] = val;\n\t        if (fn(val, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        if (iterations >= cache.length) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          cache[iterations] = step.value;\n\t        }\n\t        return iteratorValue(type, iterations, cache[iterations++]);\n\t      });\n\t    };\n\t\n\t\n\t\n\t\n\t  // # pragma Helper functions\n\t\n\t  function isSeq(maybeSeq) {\n\t    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n\t  }\n\t\n\t  var EMPTY_SEQ;\n\t\n\t  function emptySequence() {\n\t    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n\t  }\n\t\n\t  function keyedSeqFromValue(value) {\n\t    var seq =\n\t      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n\t      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n\t      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n\t      typeof value === 'object' ? new ObjectSeq(value) :\n\t      undefined;\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of [k, v] entries, '+\n\t        'or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function indexedSeqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value);\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function seqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value) ||\n\t      (typeof value === 'object' && new ObjectSeq(value));\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values, or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function maybeIndexedSeqFromValue(value) {\n\t    return (\n\t      isArrayLike(value) ? new ArraySeq(value) :\n\t      isIterator(value) ? new IteratorSeq(value) :\n\t      hasIterator(value) ? new IterableSeq(value) :\n\t      undefined\n\t    );\n\t  }\n\t\n\t  function seqIterate(seq, fn, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    }\n\t    return seq.__iterateUncached(fn, reverse);\n\t  }\n\t\n\t  function seqIterator(seq, type, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n\t      });\n\t    }\n\t    return seq.__iteratorUncached(type, reverse);\n\t  }\n\t\n\t  function fromJS(json, converter) {\n\t    return converter ?\n\t      fromJSWith(converter, json, '', {'': json}) :\n\t      fromJSDefault(json);\n\t  }\n\t\n\t  function fromJSWith(converter, json, key, parentJSON) {\n\t    if (Array.isArray(json)) {\n\t      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function fromJSDefault(json) {\n\t    if (Array.isArray(json)) {\n\t      return IndexedSeq(json).map(fromJSDefault).toList();\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return KeyedSeq(json).map(fromJSDefault).toMap();\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function isPlainObj(value) {\n\t    return value && (value.constructor === Object || value.constructor === undefined);\n\t  }\n\t\n\t  /**\n\t   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n\t   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n\t   *\n\t   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n\t   * value, which is different from the algorithm described by\n\t   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\t   *\n\t   * This is extended further to allow Objects to describe the values they\n\t   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n\t   *\n\t   * Note: because of this extension, the key equality of Immutable.Map and the\n\t   * value equality of Immutable.Set will differ from ES6 Map and Set.\n\t   *\n\t   * ### Defining custom values\n\t   *\n\t   * The easiest way to describe the value an object represents is by implementing\n\t   * `valueOf`. For example, `Date` represents a value by returning a unix\n\t   * timestamp for `valueOf`:\n\t   *\n\t   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n\t   *     var date2 = new Date(1234567890000);\n\t   *     date1.valueOf(); // 1234567890000\n\t   *     assert( date1 !== date2 );\n\t   *     assert( Immutable.is( date1, date2 ) );\n\t   *\n\t   * Note: overriding `valueOf` may have other implications if you use this object\n\t   * where JavaScript expects a primitive, such as implicit string coercion.\n\t   *\n\t   * For more complex types, especially collections, implementing `valueOf` may\n\t   * not be performant. An alternative is to implement `equals` and `hashCode`.\n\t   *\n\t   * `equals` takes another object, presumably of similar type, and returns true\n\t   * if the it is equal. Equality is symmetrical, so the same result should be\n\t   * returned if this and the argument are flipped.\n\t   *\n\t   *     assert( a.equals(b) === b.equals(a) );\n\t   *\n\t   * `hashCode` returns a 32bit integer number representing the object which will\n\t   * be used to determine how to store the value object in a Map or Set. You must\n\t   * provide both or neither methods, one must not exist without the other.\n\t   *\n\t   * Also, an important relationship between these methods must be upheld: if two\n\t   * values are equal, they *must* return the same hashCode. If the values are not\n\t   * equal, they might have the same hashCode; this is called a hash collision,\n\t   * and while undesirable for performance reasons, it is acceptable.\n\t   *\n\t   *     if (a.equals(b)) {\n\t   *       assert( a.hashCode() === b.hashCode() );\n\t   *     }\n\t   *\n\t   * All Immutable collections implement `equals` and `hashCode`.\n\t   *\n\t   */\n\t  function is(valueA, valueB) {\n\t    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t      return true;\n\t    }\n\t    if (!valueA || !valueB) {\n\t      return false;\n\t    }\n\t    if (typeof valueA.valueOf === 'function' &&\n\t        typeof valueB.valueOf === 'function') {\n\t      valueA = valueA.valueOf();\n\t      valueB = valueB.valueOf();\n\t      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t        return true;\n\t      }\n\t      if (!valueA || !valueB) {\n\t        return false;\n\t      }\n\t    }\n\t    if (typeof valueA.equals === 'function' &&\n\t        typeof valueB.equals === 'function' &&\n\t        valueA.equals(valueB)) {\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\t\n\t  function deepEqual(a, b) {\n\t    if (a === b) {\n\t      return true;\n\t    }\n\t\n\t    if (\n\t      !isIterable(b) ||\n\t      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n\t      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n\t      isKeyed(a) !== isKeyed(b) ||\n\t      isIndexed(a) !== isIndexed(b) ||\n\t      isOrdered(a) !== isOrdered(b)\n\t    ) {\n\t      return false;\n\t    }\n\t\n\t    if (a.size === 0 && b.size === 0) {\n\t      return true;\n\t    }\n\t\n\t    var notAssociative = !isAssociative(a);\n\t\n\t    if (isOrdered(a)) {\n\t      var entries = a.entries();\n\t      return b.every(function(v, k)  {\n\t        var entry = entries.next().value;\n\t        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n\t      }) && entries.next().done;\n\t    }\n\t\n\t    var flipped = false;\n\t\n\t    if (a.size === undefined) {\n\t      if (b.size === undefined) {\n\t        if (typeof a.cacheResult === 'function') {\n\t          a.cacheResult();\n\t        }\n\t      } else {\n\t        flipped = true;\n\t        var _ = a;\n\t        a = b;\n\t        b = _;\n\t      }\n\t    }\n\t\n\t    var allEqual = true;\n\t    var bSize = b.__iterate(function(v, k)  {\n\t      if (notAssociative ? !a.has(v) :\n\t          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n\t        allEqual = false;\n\t        return false;\n\t      }\n\t    });\n\t\n\t    return allEqual && a.size === bSize;\n\t  }\n\t\n\t  createClass(Repeat, IndexedSeq);\n\t\n\t    function Repeat(value, times) {\n\t      if (!(this instanceof Repeat)) {\n\t        return new Repeat(value, times);\n\t      }\n\t      this._value = value;\n\t      this.size = times === undefined ? Infinity : Math.max(0, times);\n\t      if (this.size === 0) {\n\t        if (EMPTY_REPEAT) {\n\t          return EMPTY_REPEAT;\n\t        }\n\t        EMPTY_REPEAT = this;\n\t      }\n\t    }\n\t\n\t    Repeat.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Repeat []';\n\t      }\n\t      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n\t    };\n\t\n\t    Repeat.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._value : notSetValue;\n\t    };\n\t\n\t    Repeat.prototype.includes = function(searchValue) {\n\t      return is(this._value, searchValue);\n\t    };\n\t\n\t    Repeat.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      return wholeSlice(begin, end, size) ? this :\n\t        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n\t    };\n\t\n\t    Repeat.prototype.reverse = function() {\n\t      return this;\n\t    };\n\t\n\t    Repeat.prototype.indexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return 0;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.lastIndexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return this.size;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.__iterate = function(fn, reverse) {\n\t      for (var ii = 0; ii < this.size; ii++) {\n\t        if (fn(this._value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n\t      );\n\t    };\n\t\n\t    Repeat.prototype.equals = function(other) {\n\t      return other instanceof Repeat ?\n\t        is(this._value, other._value) :\n\t        deepEqual(other);\n\t    };\n\t\n\t\n\t  var EMPTY_REPEAT;\n\t\n\t  function invariant(condition, error) {\n\t    if (!condition) throw new Error(error);\n\t  }\n\t\n\t  createClass(Range, IndexedSeq);\n\t\n\t    function Range(start, end, step) {\n\t      if (!(this instanceof Range)) {\n\t        return new Range(start, end, step);\n\t      }\n\t      invariant(step !== 0, 'Cannot step a Range by 0');\n\t      start = start || 0;\n\t      if (end === undefined) {\n\t        end = Infinity;\n\t      }\n\t      step = step === undefined ? 1 : Math.abs(step);\n\t      if (end < start) {\n\t        step = -step;\n\t      }\n\t      this._start = start;\n\t      this._end = end;\n\t      this._step = step;\n\t      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n\t      if (this.size === 0) {\n\t        if (EMPTY_RANGE) {\n\t          return EMPTY_RANGE;\n\t        }\n\t        EMPTY_RANGE = this;\n\t      }\n\t    }\n\t\n\t    Range.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Range []';\n\t      }\n\t      return 'Range [ ' +\n\t        this._start + '...' + this._end +\n\t        (this._step !== 1 ? ' by ' + this._step : '') +\n\t      ' ]';\n\t    };\n\t\n\t    Range.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ?\n\t        this._start + wrapIndex(this, index) * this._step :\n\t        notSetValue;\n\t    };\n\t\n\t    Range.prototype.includes = function(searchValue) {\n\t      var possibleIndex = (searchValue - this._start) / this._step;\n\t      return possibleIndex >= 0 &&\n\t        possibleIndex < this.size &&\n\t        possibleIndex === Math.floor(possibleIndex);\n\t    };\n\t\n\t    Range.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      begin = resolveBegin(begin, this.size);\n\t      end = resolveEnd(end, this.size);\n\t      if (end <= begin) {\n\t        return new Range(0, 0);\n\t      }\n\t      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n\t    };\n\t\n\t    Range.prototype.indexOf = function(searchValue) {\n\t      var offsetValue = searchValue - this._start;\n\t      if (offsetValue % this._step === 0) {\n\t        var index = offsetValue / this._step;\n\t        if (index >= 0 && index < this.size) {\n\t          return index\n\t        }\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Range.prototype.lastIndexOf = function(searchValue) {\n\t      return this.indexOf(searchValue);\n\t    };\n\t\n\t    Range.prototype.__iterate = function(fn, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t        value += reverse ? -step : step;\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Range.prototype.__iterator = function(type, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var v = value;\n\t        value += reverse ? -step : step;\n\t        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n\t      });\n\t    };\n\t\n\t    Range.prototype.equals = function(other) {\n\t      return other instanceof Range ?\n\t        this._start === other._start &&\n\t        this._end === other._end &&\n\t        this._step === other._step :\n\t        deepEqual(this, other);\n\t    };\n\t\n\t\n\t  var EMPTY_RANGE;\n\t\n\t  createClass(Collection, Iterable);\n\t    function Collection() {\n\t      throw TypeError('Abstract');\n\t    }\n\t\n\t\n\t  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\t\n\t  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\t\n\t  createClass(SetCollection, Collection);function SetCollection() {}\n\t\n\t\n\t  Collection.Keyed = KeyedCollection;\n\t  Collection.Indexed = IndexedCollection;\n\t  Collection.Set = SetCollection;\n\t\n\t  var imul =\n\t    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n\t    Math.imul :\n\t    function imul(a, b) {\n\t      a = a | 0; // int\n\t      b = b | 0; // int\n\t      var c = a & 0xffff;\n\t      var d = b & 0xffff;\n\t      // Shift by 0 fixes the sign on the high part.\n\t      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n\t    };\n\t\n\t  // v8 has an optimization for storing 31-bit signed numbers.\n\t  // Values which have either 00 or 11 as the high order bits qualify.\n\t  // This function drops the highest order bit in a signed number, maintaining\n\t  // the sign bit.\n\t  function smi(i32) {\n\t    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n\t  }\n\t\n\t  function hash(o) {\n\t    if (o === false || o === null || o === undefined) {\n\t      return 0;\n\t    }\n\t    if (typeof o.valueOf === 'function') {\n\t      o = o.valueOf();\n\t      if (o === false || o === null || o === undefined) {\n\t        return 0;\n\t      }\n\t    }\n\t    if (o === true) {\n\t      return 1;\n\t    }\n\t    var type = typeof o;\n\t    if (type === 'number') {\n\t      if (o !== o || o === Infinity) {\n\t        return 0;\n\t      }\n\t      var h = o | 0;\n\t      if (h !== o) {\n\t        h ^= o * 0xFFFFFFFF;\n\t      }\n\t      while (o > 0xFFFFFFFF) {\n\t        o /= 0xFFFFFFFF;\n\t        h ^= o;\n\t      }\n\t      return smi(h);\n\t    }\n\t    if (type === 'string') {\n\t      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n\t    }\n\t    if (typeof o.hashCode === 'function') {\n\t      return o.hashCode();\n\t    }\n\t    if (type === 'object') {\n\t      return hashJSObj(o);\n\t    }\n\t    if (typeof o.toString === 'function') {\n\t      return hashString(o.toString());\n\t    }\n\t    throw new Error('Value type ' + type + ' cannot be hashed.');\n\t  }\n\t\n\t  function cachedHashString(string) {\n\t    var hash = stringHashCache[string];\n\t    if (hash === undefined) {\n\t      hash = hashString(string);\n\t      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n\t        STRING_HASH_CACHE_SIZE = 0;\n\t        stringHashCache = {};\n\t      }\n\t      STRING_HASH_CACHE_SIZE++;\n\t      stringHashCache[string] = hash;\n\t    }\n\t    return hash;\n\t  }\n\t\n\t  // http://jsperf.com/hashing-strings\n\t  function hashString(string) {\n\t    // This is the hash from JVM\n\t    // The hash code for a string is computed as\n\t    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n\t    // where s[i] is the ith character of the string and n is the length of\n\t    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n\t    // (exclusive) by dropping high bits.\n\t    var hash = 0;\n\t    for (var ii = 0; ii < string.length; ii++) {\n\t      hash = 31 * hash + string.charCodeAt(ii) | 0;\n\t    }\n\t    return smi(hash);\n\t  }\n\t\n\t  function hashJSObj(obj) {\n\t    var hash;\n\t    if (usingWeakMap) {\n\t      hash = weakMap.get(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = obj[UID_HASH_KEY];\n\t    if (hash !== undefined) {\n\t      return hash;\n\t    }\n\t\n\t    if (!canDefineProperty) {\n\t      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t\n\t      hash = getIENodeHash(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = ++objHashUID;\n\t    if (objHashUID & 0x40000000) {\n\t      objHashUID = 0;\n\t    }\n\t\n\t    if (usingWeakMap) {\n\t      weakMap.set(obj, hash);\n\t    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n\t      throw new Error('Non-extensible objects are not allowed as keys.');\n\t    } else if (canDefineProperty) {\n\t      Object.defineProperty(obj, UID_HASH_KEY, {\n\t        'enumerable': false,\n\t        'configurable': false,\n\t        'writable': false,\n\t        'value': hash\n\t      });\n\t    } else if (obj.propertyIsEnumerable !== undefined &&\n\t               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n\t      // Since we can't define a non-enumerable property on the object\n\t      // we'll hijack one of the less-used non-enumerable properties to\n\t      // save our hash on it. Since this is a function it will not show up in\n\t      // `JSON.stringify` which is what we want.\n\t      obj.propertyIsEnumerable = function() {\n\t        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n\t      };\n\t      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n\t    } else if (obj.nodeType !== undefined) {\n\t      // At this point we couldn't get the IE `uniqueID` to use as a hash\n\t      // and we couldn't use a non-enumerable property to exploit the\n\t      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n\t      // itself.\n\t      obj[UID_HASH_KEY] = hash;\n\t    } else {\n\t      throw new Error('Unable to set a non-enumerable property on object.');\n\t    }\n\t\n\t    return hash;\n\t  }\n\t\n\t  // Get references to ES5 object methods.\n\t  var isExtensible = Object.isExtensible;\n\t\n\t  // True if Object.defineProperty works as expected. IE8 fails this test.\n\t  var canDefineProperty = (function() {\n\t    try {\n\t      Object.defineProperty({}, '@', {});\n\t      return true;\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t  }());\n\t\n\t  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n\t  // and avoid memory leaks from the IE cloneNode bug.\n\t  function getIENodeHash(node) {\n\t    if (node && node.nodeType > 0) {\n\t      switch (node.nodeType) {\n\t        case 1: // Element\n\t          return node.uniqueID;\n\t        case 9: // Document\n\t          return node.documentElement && node.documentElement.uniqueID;\n\t      }\n\t    }\n\t  }\n\t\n\t  // If possible, use a WeakMap.\n\t  var usingWeakMap = typeof WeakMap === 'function';\n\t  var weakMap;\n\t  if (usingWeakMap) {\n\t    weakMap = new WeakMap();\n\t  }\n\t\n\t  var objHashUID = 0;\n\t\n\t  var UID_HASH_KEY = '__immutablehash__';\n\t  if (typeof Symbol === 'function') {\n\t    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n\t  }\n\t\n\t  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n\t  var STRING_HASH_CACHE_MAX_SIZE = 255;\n\t  var STRING_HASH_CACHE_SIZE = 0;\n\t  var stringHashCache = {};\n\t\n\t  function assertNotInfinite(size) {\n\t    invariant(\n\t      size !== Infinity,\n\t      'Cannot perform this action with an infinite size.'\n\t    );\n\t  }\n\t\n\t  createClass(Map, KeyedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Map(value) {\n\t      return value === null || value === undefined ? emptyMap() :\n\t        isMap(value) && !isOrdered(value) ? value :\n\t        emptyMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n\t      return emptyMap().withMutations(function(map ) {\n\t        for (var i = 0; i < keyValues.length; i += 2) {\n\t          if (i + 1 >= keyValues.length) {\n\t            throw new Error('Missing value for key: ' + keyValues[i]);\n\t          }\n\t          map.set(keyValues[i], keyValues[i + 1]);\n\t        }\n\t      });\n\t    };\n\t\n\t    Map.prototype.toString = function() {\n\t      return this.__toString('Map {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Map.prototype.get = function(k, notSetValue) {\n\t      return this._root ?\n\t        this._root.get(0, undefined, k, notSetValue) :\n\t        notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Map.prototype.set = function(k, v) {\n\t      return updateMap(this, k, v);\n\t    };\n\t\n\t    Map.prototype.setIn = function(keyPath, v) {\n\t      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n\t    };\n\t\n\t    Map.prototype.remove = function(k) {\n\t      return updateMap(this, k, NOT_SET);\n\t    };\n\t\n\t    Map.prototype.deleteIn = function(keyPath) {\n\t      return this.updateIn(keyPath, function()  {return NOT_SET});\n\t    };\n\t\n\t    Map.prototype.update = function(k, notSetValue, updater) {\n\t      return arguments.length === 1 ?\n\t        k(this) :\n\t        this.updateIn([k], notSetValue, updater);\n\t    };\n\t\n\t    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n\t      if (!updater) {\n\t        updater = notSetValue;\n\t        notSetValue = undefined;\n\t      }\n\t      var updatedValue = updateInDeepMap(\n\t        this,\n\t        forceIterator(keyPath),\n\t        notSetValue,\n\t        updater\n\t      );\n\t      return updatedValue === NOT_SET ? undefined : updatedValue;\n\t    };\n\t\n\t    Map.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._root = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyMap();\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Map.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, undefined, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, merger, iters);\n\t    };\n\t\n\t    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.merge === 'function' ?\n\t          m.merge.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.mergeDeep === 'function' ?\n\t          m.mergeDeep.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator));\n\t    };\n\t\n\t    Map.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Map.prototype.withMutations = function(fn) {\n\t      var mutable = this.asMutable();\n\t      fn(mutable);\n\t      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n\t    };\n\t\n\t    Map.prototype.asMutable = function() {\n\t      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n\t    };\n\t\n\t    Map.prototype.asImmutable = function() {\n\t      return this.__ensureOwner();\n\t    };\n\t\n\t    Map.prototype.wasAltered = function() {\n\t      return this.__altered;\n\t    };\n\t\n\t    Map.prototype.__iterator = function(type, reverse) {\n\t      return new MapIterator(this, type, reverse);\n\t    };\n\t\n\t    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      this._root && this._root.iterate(function(entry ) {\n\t        iterations++;\n\t        return fn(entry[1], entry[0], this$0);\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t\n\t    Map.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeMap(this.size, this._root, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isMap(maybeMap) {\n\t    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n\t  }\n\t\n\t  Map.isMap = isMap;\n\t\n\t  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\t\n\t  var MapPrototype = Map.prototype;\n\t  MapPrototype[IS_MAP_SENTINEL] = true;\n\t  MapPrototype[DELETE] = MapPrototype.remove;\n\t  MapPrototype.removeIn = MapPrototype.deleteIn;\n\t\n\t\n\t  // #pragma Trie Nodes\n\t\n\t\n\t\n\t    function ArrayMapNode(ownerID, entries) {\n\t      this.ownerID = ownerID;\n\t      this.entries = entries;\n\t    }\n\t\n\t    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && entries.length === 1) {\n\t        return; // undefined\n\t      }\n\t\n\t      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n\t        return createNodes(ownerID, entries, key, value);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new ArrayMapNode(ownerID, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.bitmap = bitmap;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n\t      var bitmap = this.bitmap;\n\t      return (bitmap & bit) === 0 ? notSetValue :\n\t        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n\t    };\n\t\n\t    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var bit = 1 << keyHashFrag;\n\t      var bitmap = this.bitmap;\n\t      var exists = (bitmap & bit) !== 0;\n\t\n\t      if (!exists && value === NOT_SET) {\n\t        return this;\n\t      }\n\t\n\t      var idx = popCount(bitmap & (bit - 1));\n\t      var nodes = this.nodes;\n\t      var node = exists ? nodes[idx] : undefined;\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n\t        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n\t      }\n\t\n\t      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n\t        return nodes[idx ^ 1];\n\t      }\n\t\n\t      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n\t        return newNode;\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n\t      var newNodes = exists ? newNode ?\n\t        setIn(nodes, idx, newNode, isEditable) :\n\t        spliceOut(nodes, idx, isEditable) :\n\t        spliceIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.bitmap = newBitmap;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashArrayMapNode(ownerID, count, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.count = count;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var node = this.nodes[idx];\n\t      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n\t    };\n\t\n\t    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var removed = value === NOT_SET;\n\t      var nodes = this.nodes;\n\t      var node = nodes[idx];\n\t\n\t      if (removed && !node) {\n\t        return this;\n\t      }\n\t\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      var newCount = this.count;\n\t      if (!node) {\n\t        newCount++;\n\t      } else if (!newNode) {\n\t        newCount--;\n\t        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n\t          return packNodes(ownerID, nodes, newCount, idx);\n\t        }\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.count = newCount;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new HashArrayMapNode(ownerID, newCount, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashCollisionNode(ownerID, keyHash, entries) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entries = entries;\n\t    }\n\t\n\t    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t\n\t      var removed = value === NOT_SET;\n\t\n\t      if (keyHash !== this.keyHash) {\n\t        if (removed) {\n\t          return this;\n\t        }\n\t        SetRef(didAlter);\n\t        SetRef(didChangeSize);\n\t        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n\t      }\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && len === 2) {\n\t        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function ValueNode(ownerID, keyHash, entry) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entry = entry;\n\t    }\n\t\n\t    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n\t    };\n\t\n\t    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t      var keyMatch = is(key, this.entry[0]);\n\t      if (keyMatch ? value === this.entry[1] : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t\n\t      if (removed) {\n\t        SetRef(didChangeSize);\n\t        return; // undefined\n\t      }\n\t\n\t      if (keyMatch) {\n\t        if (ownerID && ownerID === this.ownerID) {\n\t          this.entry[1] = value;\n\t          return this;\n\t        }\n\t        return new ValueNode(ownerID, this.keyHash, [key, value]);\n\t      }\n\t\n\t      SetRef(didChangeSize);\n\t      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n\t    };\n\t\n\t\n\t\n\t  // #pragma Iterators\n\t\n\t  ArrayMapNode.prototype.iterate =\n\t  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n\t    var entries = this.entries;\n\t    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n\t      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  BitmapIndexedNode.prototype.iterate =\n\t  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n\t    var nodes = this.nodes;\n\t    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n\t      var node = nodes[reverse ? maxIndex - ii : ii];\n\t      if (node && node.iterate(fn, reverse) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  ValueNode.prototype.iterate = function (fn, reverse) {\n\t    return fn(this.entry);\n\t  }\n\t\n\t  createClass(MapIterator, Iterator);\n\t\n\t    function MapIterator(map, type, reverse) {\n\t      this._type = type;\n\t      this._reverse = reverse;\n\t      this._stack = map._root && mapIteratorFrame(map._root);\n\t    }\n\t\n\t    MapIterator.prototype.next = function() {\n\t      var type = this._type;\n\t      var stack = this._stack;\n\t      while (stack) {\n\t        var node = stack.node;\n\t        var index = stack.index++;\n\t        var maxIndex;\n\t        if (node.entry) {\n\t          if (index === 0) {\n\t            return mapIteratorValue(type, node.entry);\n\t          }\n\t        } else if (node.entries) {\n\t          maxIndex = node.entries.length - 1;\n\t          if (index <= maxIndex) {\n\t            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n\t          }\n\t        } else {\n\t          maxIndex = node.nodes.length - 1;\n\t          if (index <= maxIndex) {\n\t            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n\t            if (subNode) {\n\t              if (subNode.entry) {\n\t                return mapIteratorValue(type, subNode.entry);\n\t              }\n\t              stack = this._stack = mapIteratorFrame(subNode, stack);\n\t            }\n\t            continue;\n\t          }\n\t        }\n\t        stack = this._stack = this._stack.__prev;\n\t      }\n\t      return iteratorDone();\n\t    };\n\t\n\t\n\t  function mapIteratorValue(type, entry) {\n\t    return iteratorValue(type, entry[0], entry[1]);\n\t  }\n\t\n\t  function mapIteratorFrame(node, prev) {\n\t    return {\n\t      node: node,\n\t      index: 0,\n\t      __prev: prev\n\t    };\n\t  }\n\t\n\t  function makeMap(size, root, ownerID, hash) {\n\t    var map = Object.create(MapPrototype);\n\t    map.size = size;\n\t    map._root = root;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_MAP;\n\t  function emptyMap() {\n\t    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n\t  }\n\t\n\t  function updateMap(map, k, v) {\n\t    var newRoot;\n\t    var newSize;\n\t    if (!map._root) {\n\t      if (v === NOT_SET) {\n\t        return map;\n\t      }\n\t      newSize = 1;\n\t      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n\t    } else {\n\t      var didChangeSize = MakeRef(CHANGE_LENGTH);\n\t      var didAlter = MakeRef(DID_ALTER);\n\t      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n\t      if (!didAlter.value) {\n\t        return map;\n\t      }\n\t      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n\t    }\n\t    if (map.__ownerID) {\n\t      map.size = newSize;\n\t      map._root = newRoot;\n\t      map.__hash = undefined;\n\t      map.__altered = true;\n\t      return map;\n\t    }\n\t    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n\t  }\n\t\n\t  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (!node) {\n\t      if (value === NOT_SET) {\n\t        return node;\n\t      }\n\t      SetRef(didAlter);\n\t      SetRef(didChangeSize);\n\t      return new ValueNode(ownerID, keyHash, [key, value]);\n\t    }\n\t    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n\t  }\n\t\n\t  function isLeafNode(node) {\n\t    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n\t  }\n\t\n\t  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n\t    if (node.keyHash === keyHash) {\n\t      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n\t    }\n\t\n\t    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n\t    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t\n\t    var newNode;\n\t    var nodes = idx1 === idx2 ?\n\t      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n\t      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\t\n\t    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n\t  }\n\t\n\t  function createNodes(ownerID, entries, key, value) {\n\t    if (!ownerID) {\n\t      ownerID = new OwnerID();\n\t    }\n\t    var node = new ValueNode(ownerID, hash(key), [key, value]);\n\t    for (var ii = 0; ii < entries.length; ii++) {\n\t      var entry = entries[ii];\n\t      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n\t    }\n\t    return node;\n\t  }\n\t\n\t  function packNodes(ownerID, nodes, count, excluding) {\n\t    var bitmap = 0;\n\t    var packedII = 0;\n\t    var packedNodes = new Array(count);\n\t    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n\t      var node = nodes[ii];\n\t      if (node !== undefined && ii !== excluding) {\n\t        bitmap |= bit;\n\t        packedNodes[packedII++] = node;\n\t      }\n\t    }\n\t    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n\t  }\n\t\n\t  function expandNodes(ownerID, nodes, bitmap, including, node) {\n\t    var count = 0;\n\t    var expandedNodes = new Array(SIZE);\n\t    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n\t      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n\t    }\n\t    expandedNodes[including] = node;\n\t    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n\t  }\n\t\n\t  function mergeIntoMapWith(map, merger, iterables) {\n\t    var iters = [];\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = KeyedIterable(value);\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    return mergeIntoCollectionWith(map, merger, iters);\n\t  }\n\t\n\t  function deepMerger(existing, value, key) {\n\t    return existing && existing.mergeDeep && isIterable(value) ?\n\t      existing.mergeDeep(value) :\n\t      is(existing, value) ? existing : value;\n\t  }\n\t\n\t  function deepMergerWith(merger) {\n\t    return function(existing, value, key)  {\n\t      if (existing && existing.mergeDeepWith && isIterable(value)) {\n\t        return existing.mergeDeepWith(merger, value);\n\t      }\n\t      var nextValue = merger(existing, value, key);\n\t      return is(existing, nextValue) ? existing : nextValue;\n\t    };\n\t  }\n\t\n\t  function mergeIntoCollectionWith(collection, merger, iters) {\n\t    iters = iters.filter(function(x ) {return x.size !== 0});\n\t    if (iters.length === 0) {\n\t      return collection;\n\t    }\n\t    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n\t      return collection.constructor(iters[0]);\n\t    }\n\t    return collection.withMutations(function(collection ) {\n\t      var mergeIntoMap = merger ?\n\t        function(value, key)  {\n\t          collection.update(key, NOT_SET, function(existing )\n\t            {return existing === NOT_SET ? value : merger(existing, value, key)}\n\t          );\n\t        } :\n\t        function(value, key)  {\n\t          collection.set(key, value);\n\t        }\n\t      for (var ii = 0; ii < iters.length; ii++) {\n\t        iters[ii].forEach(mergeIntoMap);\n\t      }\n\t    });\n\t  }\n\t\n\t  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n\t    var isNotSet = existing === NOT_SET;\n\t    var step = keyPathIter.next();\n\t    if (step.done) {\n\t      var existingValue = isNotSet ? notSetValue : existing;\n\t      var newValue = updater(existingValue);\n\t      return newValue === existingValue ? existing : newValue;\n\t    }\n\t    invariant(\n\t      isNotSet || (existing && existing.set),\n\t      'invalid keyPath'\n\t    );\n\t    var key = step.value;\n\t    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n\t    var nextUpdated = updateInDeepMap(\n\t      nextExisting,\n\t      keyPathIter,\n\t      notSetValue,\n\t      updater\n\t    );\n\t    return nextUpdated === nextExisting ? existing :\n\t      nextUpdated === NOT_SET ? existing.remove(key) :\n\t      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n\t  }\n\t\n\t  function popCount(x) {\n\t    x = x - ((x >> 1) & 0x55555555);\n\t    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n\t    x = (x + (x >> 4)) & 0x0f0f0f0f;\n\t    x = x + (x >> 8);\n\t    x = x + (x >> 16);\n\t    return x & 0x7f;\n\t  }\n\t\n\t  function setIn(array, idx, val, canEdit) {\n\t    var newArray = canEdit ? array : arrCopy(array);\n\t    newArray[idx] = val;\n\t    return newArray;\n\t  }\n\t\n\t  function spliceIn(array, idx, val, canEdit) {\n\t    var newLen = array.length + 1;\n\t    if (canEdit && idx + 1 === newLen) {\n\t      array[idx] = val;\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        newArray[ii] = val;\n\t        after = -1;\n\t      } else {\n\t        newArray[ii] = array[ii + after];\n\t      }\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  function spliceOut(array, idx, canEdit) {\n\t    var newLen = array.length - 1;\n\t    if (canEdit && idx === newLen) {\n\t      array.pop();\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        after = 1;\n\t      }\n\t      newArray[ii] = array[ii + after];\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n\t  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n\t  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\t\n\t  createClass(List, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function List(value) {\n\t      var empty = emptyList();\n\t      if (value === null || value === undefined) {\n\t        return empty;\n\t      }\n\t      if (isList(value)) {\n\t        return value;\n\t      }\n\t      var iter = IndexedIterable(value);\n\t      var size = iter.size;\n\t      if (size === 0) {\n\t        return empty;\n\t      }\n\t      assertNotInfinite(size);\n\t      if (size > 0 && size < SIZE) {\n\t        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n\t      }\n\t      return empty.withMutations(function(list ) {\n\t        list.setSize(size);\n\t        iter.forEach(function(v, i)  {return list.set(i, v)});\n\t      });\n\t    }\n\t\n\t    List.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    List.prototype.toString = function() {\n\t      return this.__toString('List [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    List.prototype.get = function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      if (index >= 0 && index < this.size) {\n\t        index += this._origin;\n\t        var node = listNodeFor(this, index);\n\t        return node && node.array[index & MASK];\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    List.prototype.set = function(index, value) {\n\t      return updateList(this, index, value);\n\t    };\n\t\n\t    List.prototype.remove = function(index) {\n\t      return !this.has(index) ? this :\n\t        index === 0 ? this.shift() :\n\t        index === this.size - 1 ? this.pop() :\n\t        this.splice(index, 1);\n\t    };\n\t\n\t    List.prototype.insert = function(index, value) {\n\t      return this.splice(index, 0, value);\n\t    };\n\t\n\t    List.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = this._origin = this._capacity = 0;\n\t        this._level = SHIFT;\n\t        this._root = this._tail = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyList();\n\t    };\n\t\n\t    List.prototype.push = function(/*...values*/) {\n\t      var values = arguments;\n\t      var oldSize = this.size;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, 0, oldSize + values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(oldSize + ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.pop = function() {\n\t      return setListBounds(this, 0, -1);\n\t    };\n\t\n\t    List.prototype.unshift = function(/*...values*/) {\n\t      var values = arguments;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, -values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.shift = function() {\n\t      return setListBounds(this, 1);\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    List.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, undefined, arguments);\n\t    };\n\t\n\t    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, merger, iters);\n\t    };\n\t\n\t    List.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    List.prototype.setSize = function(size) {\n\t      return setListBounds(this, 0, size);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    List.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      if (wholeSlice(begin, end, size)) {\n\t        return this;\n\t      }\n\t      return setListBounds(\n\t        this,\n\t        resolveBegin(begin, size),\n\t        resolveEnd(end, size)\n\t      );\n\t    };\n\t\n\t    List.prototype.__iterator = function(type, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      return new Iterator(function()  {\n\t        var value = values();\n\t        return value === DONE ?\n\t          iteratorDone() :\n\t          iteratorValue(type, index++, value);\n\t      });\n\t    };\n\t\n\t    List.prototype.__iterate = function(fn, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      var value;\n\t      while ((value = values()) !== DONE) {\n\t        if (fn(value, index++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return index;\n\t    };\n\t\n\t    List.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        return this;\n\t      }\n\t      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isList(maybeList) {\n\t    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n\t  }\n\t\n\t  List.isList = isList;\n\t\n\t  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\t\n\t  var ListPrototype = List.prototype;\n\t  ListPrototype[IS_LIST_SENTINEL] = true;\n\t  ListPrototype[DELETE] = ListPrototype.remove;\n\t  ListPrototype.setIn = MapPrototype.setIn;\n\t  ListPrototype.deleteIn =\n\t  ListPrototype.removeIn = MapPrototype.removeIn;\n\t  ListPrototype.update = MapPrototype.update;\n\t  ListPrototype.updateIn = MapPrototype.updateIn;\n\t  ListPrototype.mergeIn = MapPrototype.mergeIn;\n\t  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  ListPrototype.withMutations = MapPrototype.withMutations;\n\t  ListPrototype.asMutable = MapPrototype.asMutable;\n\t  ListPrototype.asImmutable = MapPrototype.asImmutable;\n\t  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t\n\t    function VNode(array, ownerID) {\n\t      this.array = array;\n\t      this.ownerID = ownerID;\n\t    }\n\t\n\t    // TODO: seems like these methods are very similar\n\t\n\t    VNode.prototype.removeBefore = function(ownerID, level, index) {\n\t      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var originIndex = (index >>> level) & MASK;\n\t      if (originIndex >= this.array.length) {\n\t        return new VNode([], ownerID);\n\t      }\n\t      var removingFirst = originIndex === 0;\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[originIndex];\n\t        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && removingFirst) {\n\t          return this;\n\t        }\n\t      }\n\t      if (removingFirst && !newChild) {\n\t        return this;\n\t      }\n\t      var editable = editableVNode(this, ownerID);\n\t      if (!removingFirst) {\n\t        for (var ii = 0; ii < originIndex; ii++) {\n\t          editable.array[ii] = undefined;\n\t        }\n\t      }\n\t      if (newChild) {\n\t        editable.array[originIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t    VNode.prototype.removeAfter = function(ownerID, level, index) {\n\t      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var sizeIndex = ((index - 1) >>> level) & MASK;\n\t      if (sizeIndex >= this.array.length) {\n\t        return this;\n\t      }\n\t\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[sizeIndex];\n\t        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n\t          return this;\n\t        }\n\t      }\n\t\n\t      var editable = editableVNode(this, ownerID);\n\t      editable.array.splice(sizeIndex + 1);\n\t      if (newChild) {\n\t        editable.array[sizeIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t\n\t\n\t  var DONE = {};\n\t\n\t  function iterateList(list, reverse) {\n\t    var left = list._origin;\n\t    var right = list._capacity;\n\t    var tailPos = getTailOffset(right);\n\t    var tail = list._tail;\n\t\n\t    return iterateNodeOrLeaf(list._root, list._level, 0);\n\t\n\t    function iterateNodeOrLeaf(node, level, offset) {\n\t      return level === 0 ?\n\t        iterateLeaf(node, offset) :\n\t        iterateNode(node, level, offset);\n\t    }\n\t\n\t    function iterateLeaf(node, offset) {\n\t      var array = offset === tailPos ? tail && tail.array : node && node.array;\n\t      var from = offset > left ? 0 : left - offset;\n\t      var to = right - offset;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        if (from === to) {\n\t          return DONE;\n\t        }\n\t        var idx = reverse ? --to : from++;\n\t        return array && array[idx];\n\t      };\n\t    }\n\t\n\t    function iterateNode(node, level, offset) {\n\t      var values;\n\t      var array = node && node.array;\n\t      var from = offset > left ? 0 : (left - offset) >> level;\n\t      var to = ((right - offset) >> level) + 1;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        do {\n\t          if (values) {\n\t            var value = values();\n\t            if (value !== DONE) {\n\t              return value;\n\t            }\n\t            values = null;\n\t          }\n\t          if (from === to) {\n\t            return DONE;\n\t          }\n\t          var idx = reverse ? --to : from++;\n\t          values = iterateNodeOrLeaf(\n\t            array && array[idx], level - SHIFT, offset + (idx << level)\n\t          );\n\t        } while (true);\n\t      };\n\t    }\n\t  }\n\t\n\t  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n\t    var list = Object.create(ListPrototype);\n\t    list.size = capacity - origin;\n\t    list._origin = origin;\n\t    list._capacity = capacity;\n\t    list._level = level;\n\t    list._root = root;\n\t    list._tail = tail;\n\t    list.__ownerID = ownerID;\n\t    list.__hash = hash;\n\t    list.__altered = false;\n\t    return list;\n\t  }\n\t\n\t  var EMPTY_LIST;\n\t  function emptyList() {\n\t    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n\t  }\n\t\n\t  function updateList(list, index, value) {\n\t    index = wrapIndex(list, index);\n\t\n\t    if (index !== index) {\n\t      return list;\n\t    }\n\t\n\t    if (index >= list.size || index < 0) {\n\t      return list.withMutations(function(list ) {\n\t        index < 0 ?\n\t          setListBounds(list, index).set(0, value) :\n\t          setListBounds(list, 0, index + 1).set(index, value)\n\t      });\n\t    }\n\t\n\t    index += list._origin;\n\t\n\t    var newTail = list._tail;\n\t    var newRoot = list._root;\n\t    var didAlter = MakeRef(DID_ALTER);\n\t    if (index >= getTailOffset(list._capacity)) {\n\t      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n\t    } else {\n\t      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n\t    }\n\t\n\t    if (!didAlter.value) {\n\t      return list;\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n\t  }\n\t\n\t  function updateVNode(node, ownerID, level, index, value, didAlter) {\n\t    var idx = (index >>> level) & MASK;\n\t    var nodeHas = node && idx < node.array.length;\n\t    if (!nodeHas && value === undefined) {\n\t      return node;\n\t    }\n\t\n\t    var newNode;\n\t\n\t    if (level > 0) {\n\t      var lowerNode = node && node.array[idx];\n\t      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n\t      if (newLowerNode === lowerNode) {\n\t        return node;\n\t      }\n\t      newNode = editableVNode(node, ownerID);\n\t      newNode.array[idx] = newLowerNode;\n\t      return newNode;\n\t    }\n\t\n\t    if (nodeHas && node.array[idx] === value) {\n\t      return node;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t\n\t    newNode = editableVNode(node, ownerID);\n\t    if (value === undefined && idx === newNode.array.length - 1) {\n\t      newNode.array.pop();\n\t    } else {\n\t      newNode.array[idx] = value;\n\t    }\n\t    return newNode;\n\t  }\n\t\n\t  function editableVNode(node, ownerID) {\n\t    if (ownerID && node && ownerID === node.ownerID) {\n\t      return node;\n\t    }\n\t    return new VNode(node ? node.array.slice() : [], ownerID);\n\t  }\n\t\n\t  function listNodeFor(list, rawIndex) {\n\t    if (rawIndex >= getTailOffset(list._capacity)) {\n\t      return list._tail;\n\t    }\n\t    if (rawIndex < 1 << (list._level + SHIFT)) {\n\t      var node = list._root;\n\t      var level = list._level;\n\t      while (node && level > 0) {\n\t        node = node.array[(rawIndex >>> level) & MASK];\n\t        level -= SHIFT;\n\t      }\n\t      return node;\n\t    }\n\t  }\n\t\n\t  function setListBounds(list, begin, end) {\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      end = end | 0;\n\t    }\n\t    var owner = list.__ownerID || new OwnerID();\n\t    var oldOrigin = list._origin;\n\t    var oldCapacity = list._capacity;\n\t    var newOrigin = oldOrigin + begin;\n\t    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n\t    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n\t      return list;\n\t    }\n\t\n\t    // If it's going to end after it starts, it's empty.\n\t    if (newOrigin >= newCapacity) {\n\t      return list.clear();\n\t    }\n\t\n\t    var newLevel = list._level;\n\t    var newRoot = list._root;\n\t\n\t    // New origin might need creating a higher root.\n\t    var offsetShift = 0;\n\t    while (newOrigin + offsetShift < 0) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t      offsetShift += 1 << newLevel;\n\t    }\n\t    if (offsetShift) {\n\t      newOrigin += offsetShift;\n\t      oldOrigin += offsetShift;\n\t      newCapacity += offsetShift;\n\t      oldCapacity += offsetShift;\n\t    }\n\t\n\t    var oldTailOffset = getTailOffset(oldCapacity);\n\t    var newTailOffset = getTailOffset(newCapacity);\n\t\n\t    // New size might need creating a higher root.\n\t    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t    }\n\t\n\t    // Locate or create the new tail.\n\t    var oldTail = list._tail;\n\t    var newTail = newTailOffset < oldTailOffset ?\n\t      listNodeFor(list, newCapacity - 1) :\n\t      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\t\n\t    // Merge Tail into tree.\n\t    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n\t      newRoot = editableVNode(newRoot, owner);\n\t      var node = newRoot;\n\t      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n\t        var idx = (oldTailOffset >>> level) & MASK;\n\t        node = node.array[idx] = editableVNode(node.array[idx], owner);\n\t      }\n\t      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n\t    }\n\t\n\t    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n\t    if (newCapacity < oldCapacity) {\n\t      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n\t    }\n\t\n\t    // If the new origin is within the tail, then we do not need a root.\n\t    if (newOrigin >= newTailOffset) {\n\t      newOrigin -= newTailOffset;\n\t      newCapacity -= newTailOffset;\n\t      newLevel = SHIFT;\n\t      newRoot = null;\n\t      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\t\n\t    // Otherwise, if the root has been trimmed, garbage collect.\n\t    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n\t      offsetShift = 0;\n\t\n\t      // Identify the new top root node of the subtree of the old root.\n\t      while (newRoot) {\n\t        var beginIndex = (newOrigin >>> newLevel) & MASK;\n\t        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n\t          break;\n\t        }\n\t        if (beginIndex) {\n\t          offsetShift += (1 << newLevel) * beginIndex;\n\t        }\n\t        newLevel -= SHIFT;\n\t        newRoot = newRoot.array[beginIndex];\n\t      }\n\t\n\t      // Trim the new sides of the new root.\n\t      if (newRoot && newOrigin > oldOrigin) {\n\t        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n\t      }\n\t      if (newRoot && newTailOffset < oldTailOffset) {\n\t        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n\t      }\n\t      if (offsetShift) {\n\t        newOrigin -= offsetShift;\n\t        newCapacity -= offsetShift;\n\t      }\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list.size = newCapacity - newOrigin;\n\t      list._origin = newOrigin;\n\t      list._capacity = newCapacity;\n\t      list._level = newLevel;\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n\t  }\n\t\n\t  function mergeIntoListWith(list, merger, iterables) {\n\t    var iters = [];\n\t    var maxSize = 0;\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = IndexedIterable(value);\n\t      if (iter.size > maxSize) {\n\t        maxSize = iter.size;\n\t      }\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    if (maxSize > list.size) {\n\t      list = list.setSize(maxSize);\n\t    }\n\t    return mergeIntoCollectionWith(list, merger, iters);\n\t  }\n\t\n\t  function getTailOffset(size) {\n\t    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n\t  }\n\t\n\t  createClass(OrderedMap, Map);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedMap(value) {\n\t      return value === null || value === undefined ? emptyOrderedMap() :\n\t        isOrderedMap(value) ? value :\n\t        emptyOrderedMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    OrderedMap.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedMap.prototype.toString = function() {\n\t      return this.__toString('OrderedMap {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    OrderedMap.prototype.get = function(k, notSetValue) {\n\t      var index = this._map.get(k);\n\t      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    OrderedMap.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._map.clear();\n\t        this._list.clear();\n\t        return this;\n\t      }\n\t      return emptyOrderedMap();\n\t    };\n\t\n\t    OrderedMap.prototype.set = function(k, v) {\n\t      return updateOrderedMap(this, k, v);\n\t    };\n\t\n\t    OrderedMap.prototype.remove = function(k) {\n\t      return updateOrderedMap(this, k, NOT_SET);\n\t    };\n\t\n\t    OrderedMap.prototype.wasAltered = function() {\n\t      return this._map.wasAltered() || this._list.wasAltered();\n\t    };\n\t\n\t    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._list.__iterate(\n\t        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n\t        reverse\n\t      );\n\t    };\n\t\n\t    OrderedMap.prototype.__iterator = function(type, reverse) {\n\t      return this._list.fromEntrySeq().__iterator(type, reverse);\n\t    };\n\t\n\t    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      var newList = this._list.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        this._list = newList;\n\t        return this;\n\t      }\n\t      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isOrderedMap(maybeOrderedMap) {\n\t    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n\t  }\n\t\n\t  OrderedMap.isOrderedMap = isOrderedMap;\n\t\n\t  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n\t  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\t\n\t\n\t\n\t  function makeOrderedMap(map, list, ownerID, hash) {\n\t    var omap = Object.create(OrderedMap.prototype);\n\t    omap.size = map ? map.size : 0;\n\t    omap._map = map;\n\t    omap._list = list;\n\t    omap.__ownerID = ownerID;\n\t    omap.__hash = hash;\n\t    return omap;\n\t  }\n\t\n\t  var EMPTY_ORDERED_MAP;\n\t  function emptyOrderedMap() {\n\t    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n\t  }\n\t\n\t  function updateOrderedMap(omap, k, v) {\n\t    var map = omap._map;\n\t    var list = omap._list;\n\t    var i = map.get(k);\n\t    var has = i !== undefined;\n\t    var newMap;\n\t    var newList;\n\t    if (v === NOT_SET) { // removed\n\t      if (!has) {\n\t        return omap;\n\t      }\n\t      if (list.size >= SIZE && list.size >= map.size * 2) {\n\t        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n\t        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n\t        if (omap.__ownerID) {\n\t          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n\t        }\n\t      } else {\n\t        newMap = map.remove(k);\n\t        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n\t      }\n\t    } else {\n\t      if (has) {\n\t        if (v === list.get(i)[1]) {\n\t          return omap;\n\t        }\n\t        newMap = map;\n\t        newList = list.set(i, [k, v]);\n\t      } else {\n\t        newMap = map.set(k, list.size);\n\t        newList = list.set(list.size, [k, v]);\n\t      }\n\t    }\n\t    if (omap.__ownerID) {\n\t      omap.size = newMap.size;\n\t      omap._map = newMap;\n\t      omap._list = newList;\n\t      omap.__hash = undefined;\n\t      return omap;\n\t    }\n\t    return makeOrderedMap(newMap, newList);\n\t  }\n\t\n\t  createClass(ToKeyedSequence, KeyedSeq);\n\t    function ToKeyedSequence(indexed, useKeys) {\n\t      this._iter = indexed;\n\t      this._useKeys = useKeys;\n\t      this.size = indexed.size;\n\t    }\n\t\n\t    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n\t      return this._iter.get(key, notSetValue);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.has = function(key) {\n\t      return this._iter.has(key);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.valueSeq = function() {\n\t      return this._iter.valueSeq();\n\t    };\n\t\n\t    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n\t      var reversedSequence = reverseFactory(this, true);\n\t      if (!this._useKeys) {\n\t        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n\t      }\n\t      return reversedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n\t      var mappedSequence = mapFactory(this, mapper, context);\n\t      if (!this._useKeys) {\n\t        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n\t      }\n\t      return mappedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var ii;\n\t      return this._iter.__iterate(\n\t        this._useKeys ?\n\t          function(v, k)  {return fn(v, k, this$0)} :\n\t          ((ii = reverse ? resolveSize(this) : 0),\n\t            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n\t        reverse\n\t      );\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n\t      if (this._useKeys) {\n\t        return this._iter.__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var ii = reverse ? resolveSize(this) : 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n\t      });\n\t    };\n\t\n\t  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(ToIndexedSequence, IndexedSeq);\n\t    function ToIndexedSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToIndexedSequence.prototype.includes = function(value) {\n\t      return this._iter.includes(value);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, iterations++, step.value, step)\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(ToSetSequence, SetSeq);\n\t    function ToSetSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToSetSequence.prototype.has = function(key) {\n\t      return this._iter.includes(key);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, step.value, step.value, step);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(FromEntriesSequence, KeyedSeq);\n\t    function FromEntriesSequence(entries) {\n\t      this._iter = entries;\n\t      this.size = entries.size;\n\t    }\n\t\n\t    FromEntriesSequence.prototype.entrySeq = function() {\n\t      return this._iter.toSeq();\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(entry ) {\n\t        // Check if entry exists first so array access doesn't throw for holes\n\t        // in the parent iteration.\n\t        if (entry) {\n\t          validateEntry(entry);\n\t          var indexedIterable = isIterable(entry);\n\t          return fn(\n\t            indexedIterable ? entry.get(1) : entry[1],\n\t            indexedIterable ? entry.get(0) : entry[0],\n\t            this$0\n\t          );\n\t        }\n\t      }, reverse);\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          // Check if entry exists first so array access doesn't throw for holes\n\t          // in the parent iteration.\n\t          if (entry) {\n\t            validateEntry(entry);\n\t            var indexedIterable = isIterable(entry);\n\t            return iteratorValue(\n\t              type,\n\t              indexedIterable ? entry.get(0) : entry[0],\n\t              indexedIterable ? entry.get(1) : entry[1],\n\t              step\n\t            );\n\t          }\n\t        }\n\t      });\n\t    };\n\t\n\t\n\t  ToIndexedSequence.prototype.cacheResult =\n\t  ToKeyedSequence.prototype.cacheResult =\n\t  ToSetSequence.prototype.cacheResult =\n\t  FromEntriesSequence.prototype.cacheResult =\n\t    cacheResultThrough;\n\t\n\t\n\t  function flipFactory(iterable) {\n\t    var flipSequence = makeSequence(iterable);\n\t    flipSequence._iter = iterable;\n\t    flipSequence.size = iterable.size;\n\t    flipSequence.flip = function()  {return iterable};\n\t    flipSequence.reverse = function () {\n\t      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n\t      reversedSequence.flip = function()  {return iterable.reverse()};\n\t      return reversedSequence;\n\t    };\n\t    flipSequence.has = function(key ) {return iterable.includes(key)};\n\t    flipSequence.includes = function(key ) {return iterable.has(key)};\n\t    flipSequence.cacheResult = cacheResultThrough;\n\t    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n\t    }\n\t    flipSequence.__iteratorUncached = function(type, reverse) {\n\t      if (type === ITERATE_ENTRIES) {\n\t        var iterator = iterable.__iterator(type, reverse);\n\t        return new Iterator(function()  {\n\t          var step = iterator.next();\n\t          if (!step.done) {\n\t            var k = step.value[0];\n\t            step.value[0] = step.value[1];\n\t            step.value[1] = k;\n\t          }\n\t          return step;\n\t        });\n\t      }\n\t      return iterable.__iterator(\n\t        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n\t        reverse\n\t      );\n\t    }\n\t    return flipSequence;\n\t  }\n\t\n\t\n\t  function mapFactory(iterable, mapper, context) {\n\t    var mappedSequence = makeSequence(iterable);\n\t    mappedSequence.size = iterable.size;\n\t    mappedSequence.has = function(key ) {return iterable.has(key)};\n\t    mappedSequence.get = function(key, notSetValue)  {\n\t      var v = iterable.get(key, NOT_SET);\n\t      return v === NOT_SET ?\n\t        notSetValue :\n\t        mapper.call(context, v, key, iterable);\n\t    };\n\t    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(\n\t        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n\t        reverse\n\t      );\n\t    }\n\t    mappedSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var key = entry[0];\n\t        return iteratorValue(\n\t          type,\n\t          key,\n\t          mapper.call(context, entry[1], key, iterable),\n\t          step\n\t        );\n\t      });\n\t    }\n\t    return mappedSequence;\n\t  }\n\t\n\t\n\t  function reverseFactory(iterable, useKeys) {\n\t    var reversedSequence = makeSequence(iterable);\n\t    reversedSequence._iter = iterable;\n\t    reversedSequence.size = iterable.size;\n\t    reversedSequence.reverse = function()  {return iterable};\n\t    if (iterable.flip) {\n\t      reversedSequence.flip = function () {\n\t        var flipSequence = flipFactory(iterable);\n\t        flipSequence.reverse = function()  {return iterable.flip()};\n\t        return flipSequence;\n\t      };\n\t    }\n\t    reversedSequence.get = function(key, notSetValue) \n\t      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n\t    reversedSequence.has = function(key )\n\t      {return iterable.has(useKeys ? key : -1 - key)};\n\t    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n\t    reversedSequence.cacheResult = cacheResultThrough;\n\t    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n\t    };\n\t    reversedSequence.__iterator =\n\t      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n\t    return reversedSequence;\n\t  }\n\t\n\t\n\t  function filterFactory(iterable, predicate, context, useKeys) {\n\t    var filterSequence = makeSequence(iterable);\n\t    if (useKeys) {\n\t      filterSequence.has = function(key ) {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n\t      };\n\t      filterSequence.get = function(key, notSetValue)  {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n\t          v : notSetValue;\n\t      };\n\t    }\n\t    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t    filterSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          var key = entry[0];\n\t          var value = entry[1];\n\t          if (predicate.call(context, value, key, iterable)) {\n\t            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n\t          }\n\t        }\n\t      });\n\t    }\n\t    return filterSequence;\n\t  }\n\t\n\t\n\t  function countByFactory(iterable, grouper, context) {\n\t    var groups = Map().asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        0,\n\t        function(a ) {return a + 1}\n\t      );\n\t    });\n\t    return groups.asImmutable();\n\t  }\n\t\n\t\n\t  function groupByFactory(iterable, grouper, context) {\n\t    var isKeyedIter = isKeyed(iterable);\n\t    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n\t      );\n\t    });\n\t    var coerce = iterableClass(iterable);\n\t    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n\t  }\n\t\n\t\n\t  function sliceFactory(iterable, begin, end, useKeys) {\n\t    var originalSize = iterable.size;\n\t\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      if (end === Infinity) {\n\t        end = originalSize;\n\t      } else {\n\t        end = end | 0;\n\t      }\n\t    }\n\t\n\t    if (wholeSlice(begin, end, originalSize)) {\n\t      return iterable;\n\t    }\n\t\n\t    var resolvedBegin = resolveBegin(begin, originalSize);\n\t    var resolvedEnd = resolveEnd(end, originalSize);\n\t\n\t    // begin or end will be NaN if they were provided as negative numbers and\n\t    // this iterable's size is unknown. In that case, cache first so there is\n\t    // a known size and these do not resolve to NaN.\n\t    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n\t      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n\t    }\n\t\n\t    // Note: resolvedEnd is undefined when the original sequence's length is\n\t    // unknown and this slice did not supply an end and should contain all\n\t    // elements after resolvedBegin.\n\t    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n\t    var resolvedSize = resolvedEnd - resolvedBegin;\n\t    var sliceSize;\n\t    if (resolvedSize === resolvedSize) {\n\t      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n\t    }\n\t\n\t    var sliceSeq = makeSequence(iterable);\n\t\n\t    // If iterable.size is undefined, the size of the realized sliceSeq is\n\t    // unknown at this point unless the number of items to slice is 0\n\t    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\t\n\t    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n\t      sliceSeq.get = function (index, notSetValue) {\n\t        index = wrapIndex(this, index);\n\t        return index >= 0 && index < sliceSize ?\n\t          iterable.get(index + resolvedBegin, notSetValue) :\n\t          notSetValue;\n\t      }\n\t    }\n\t\n\t    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (sliceSize === 0) {\n\t        return 0;\n\t      }\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var skipped = 0;\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k)  {\n\t        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n\t                 iterations !== sliceSize;\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t\n\t    sliceSeq.__iteratorUncached = function(type, reverse) {\n\t      if (sliceSize !== 0 && reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      // Don't bother instantiating parent iterator if taking 0.\n\t      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n\t      var skipped = 0;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (skipped++ < resolvedBegin) {\n\t          iterator.next();\n\t        }\n\t        if (++iterations > sliceSize) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (useKeys || type === ITERATE_VALUES) {\n\t          return step;\n\t        } else if (type === ITERATE_KEYS) {\n\t          return iteratorValue(type, iterations - 1, undefined, step);\n\t        } else {\n\t          return iteratorValue(type, iterations - 1, step.value[1], step);\n\t        }\n\t      });\n\t    }\n\t\n\t    return sliceSeq;\n\t  }\n\t\n\t\n\t  function takeWhileFactory(iterable, predicate, context) {\n\t    var takeSequence = makeSequence(iterable);\n\t    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c) \n\t        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n\t      );\n\t      return iterations;\n\t    };\n\t    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterating = true;\n\t      return new Iterator(function()  {\n\t        if (!iterating) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var k = entry[0];\n\t        var v = entry[1];\n\t        if (!predicate.call(context, v, k, this$0)) {\n\t          iterating = false;\n\t          return iteratorDone();\n\t        }\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return takeSequence;\n\t  }\n\t\n\t\n\t  function skipWhileFactory(iterable, predicate, context, useKeys) {\n\t    var skipSequence = makeSequence(iterable);\n\t    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var skipping = true;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step, k, v;\n\t        do {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            if (useKeys || type === ITERATE_VALUES) {\n\t              return step;\n\t            } else if (type === ITERATE_KEYS) {\n\t              return iteratorValue(type, iterations++, undefined, step);\n\t            } else {\n\t              return iteratorValue(type, iterations++, step.value[1], step);\n\t            }\n\t          }\n\t          var entry = step.value;\n\t          k = entry[0];\n\t          v = entry[1];\n\t          skipping && (skipping = predicate.call(context, v, k, this$0));\n\t        } while (skipping);\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return skipSequence;\n\t  }\n\t\n\t\n\t  function concatFactory(iterable, values) {\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var iters = [iterable].concat(values).map(function(v ) {\n\t      if (!isIterable(v)) {\n\t        v = isKeyedIterable ?\n\t          keyedSeqFromValue(v) :\n\t          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n\t      } else if (isKeyedIterable) {\n\t        v = KeyedIterable(v);\n\t      }\n\t      return v;\n\t    }).filter(function(v ) {return v.size !== 0});\n\t\n\t    if (iters.length === 0) {\n\t      return iterable;\n\t    }\n\t\n\t    if (iters.length === 1) {\n\t      var singleton = iters[0];\n\t      if (singleton === iterable ||\n\t          isKeyedIterable && isKeyed(singleton) ||\n\t          isIndexed(iterable) && isIndexed(singleton)) {\n\t        return singleton;\n\t      }\n\t    }\n\t\n\t    var concatSeq = new ArraySeq(iters);\n\t    if (isKeyedIterable) {\n\t      concatSeq = concatSeq.toKeyedSeq();\n\t    } else if (!isIndexed(iterable)) {\n\t      concatSeq = concatSeq.toSetSeq();\n\t    }\n\t    concatSeq = concatSeq.flatten(true);\n\t    concatSeq.size = iters.reduce(\n\t      function(sum, seq)  {\n\t        if (sum !== undefined) {\n\t          var size = seq.size;\n\t          if (size !== undefined) {\n\t            return sum + size;\n\t          }\n\t        }\n\t      },\n\t      0\n\t    );\n\t    return concatSeq;\n\t  }\n\t\n\t\n\t  function flattenFactory(iterable, depth, useKeys) {\n\t    var flatSequence = makeSequence(iterable);\n\t    flatSequence.__iterateUncached = function(fn, reverse) {\n\t      var iterations = 0;\n\t      var stopped = false;\n\t      function flatDeep(iter, currentDepth) {var this$0 = this;\n\t        iter.__iterate(function(v, k)  {\n\t          if ((!depth || currentDepth < depth) && isIterable(v)) {\n\t            flatDeep(v, currentDepth + 1);\n\t          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n\t            stopped = true;\n\t          }\n\t          return !stopped;\n\t        }, reverse);\n\t      }\n\t      flatDeep(iterable, 0);\n\t      return iterations;\n\t    }\n\t    flatSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(type, reverse);\n\t      var stack = [];\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (iterator) {\n\t          var step = iterator.next();\n\t          if (step.done !== false) {\n\t            iterator = stack.pop();\n\t            continue;\n\t          }\n\t          var v = step.value;\n\t          if (type === ITERATE_ENTRIES) {\n\t            v = v[1];\n\t          }\n\t          if ((!depth || stack.length < depth) && isIterable(v)) {\n\t            stack.push(iterator);\n\t            iterator = v.__iterator(type, reverse);\n\t          } else {\n\t            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n\t          }\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    }\n\t    return flatSequence;\n\t  }\n\t\n\t\n\t  function flatMapFactory(iterable, mapper, context) {\n\t    var coerce = iterableClass(iterable);\n\t    return iterable.toSeq().map(\n\t      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n\t    ).flatten(true);\n\t  }\n\t\n\t\n\t  function interposeFactory(iterable, separator) {\n\t    var interposedSequence = makeSequence(iterable);\n\t    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n\t    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k) \n\t        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n\t        fn(v, iterations++, this$0) !== false},\n\t        reverse\n\t      );\n\t      return iterations;\n\t    };\n\t    interposedSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      var step;\n\t      return new Iterator(function()  {\n\t        if (!step || iterations % 2) {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t        }\n\t        return iterations % 2 ?\n\t          iteratorValue(type, iterations++, separator) :\n\t          iteratorValue(type, iterations++, step.value, step);\n\t      });\n\t    };\n\t    return interposedSequence;\n\t  }\n\t\n\t\n\t  function sortFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var index = 0;\n\t    var entries = iterable.toSeq().map(\n\t      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n\t    ).toArray();\n\t    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n\t      isKeyedIterable ?\n\t      function(v, i)  { entries[i].length = 2; } :\n\t      function(v, i)  { entries[i] = v[1]; }\n\t    );\n\t    return isKeyedIterable ? KeyedSeq(entries) :\n\t      isIndexed(iterable) ? IndexedSeq(entries) :\n\t      SetSeq(entries);\n\t  }\n\t\n\t\n\t  function maxFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    if (mapper) {\n\t      var entry = iterable.toSeq()\n\t        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n\t        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n\t      return entry && entry[0];\n\t    } else {\n\t      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n\t    }\n\t  }\n\t\n\t  function maxCompare(comparator, a, b) {\n\t    var comp = comparator(b, a);\n\t    // b is considered the new max if the comparator declares them equal, but\n\t    // they are not equal and b is in fact a nullish value.\n\t    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n\t  }\n\t\n\t\n\t  function zipWithFactory(keyIter, zipper, iters) {\n\t    var zipSequence = makeSequence(keyIter);\n\t    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n\t    // Note: this a generic base implementation of __iterate in terms of\n\t    // __iterator which may be more generically useful in the future.\n\t    zipSequence.__iterate = function(fn, reverse) {\n\t      /* generic:\n\t      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        iterations++;\n\t        if (fn(step.value[1], step.value[0], this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t      */\n\t      // indexed:\n\t      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        if (fn(step.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t    zipSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterators = iters.map(function(i )\n\t        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n\t      );\n\t      var iterations = 0;\n\t      var isDone = false;\n\t      return new Iterator(function()  {\n\t        var steps;\n\t        if (!isDone) {\n\t          steps = iterators.map(function(i ) {return i.next()});\n\t          isDone = steps.some(function(s ) {return s.done});\n\t        }\n\t        if (isDone) {\n\t          return iteratorDone();\n\t        }\n\t        return iteratorValue(\n\t          type,\n\t          iterations++,\n\t          zipper.apply(null, steps.map(function(s ) {return s.value}))\n\t        );\n\t      });\n\t    };\n\t    return zipSequence\n\t  }\n\t\n\t\n\t  // #pragma Helper Functions\n\t\n\t  function reify(iter, seq) {\n\t    return isSeq(iter) ? seq : iter.constructor(seq);\n\t  }\n\t\n\t  function validateEntry(entry) {\n\t    if (entry !== Object(entry)) {\n\t      throw new TypeError('Expected [K, V] tuple: ' + entry);\n\t    }\n\t  }\n\t\n\t  function resolveSize(iter) {\n\t    assertNotInfinite(iter.size);\n\t    return ensureSize(iter);\n\t  }\n\t\n\t  function iterableClass(iterable) {\n\t    return isKeyed(iterable) ? KeyedIterable :\n\t      isIndexed(iterable) ? IndexedIterable :\n\t      SetIterable;\n\t  }\n\t\n\t  function makeSequence(iterable) {\n\t    return Object.create(\n\t      (\n\t        isKeyed(iterable) ? KeyedSeq :\n\t        isIndexed(iterable) ? IndexedSeq :\n\t        SetSeq\n\t      ).prototype\n\t    );\n\t  }\n\t\n\t  function cacheResultThrough() {\n\t    if (this._iter.cacheResult) {\n\t      this._iter.cacheResult();\n\t      this.size = this._iter.size;\n\t      return this;\n\t    } else {\n\t      return Seq.prototype.cacheResult.call(this);\n\t    }\n\t  }\n\t\n\t  function defaultComparator(a, b) {\n\t    return a > b ? 1 : a < b ? -1 : 0;\n\t  }\n\t\n\t  function forceIterator(keyPath) {\n\t    var iter = getIterator(keyPath);\n\t    if (!iter) {\n\t      // Array might not be iterable in this environment, so we need a fallback\n\t      // to our wrapped type.\n\t      if (!isArrayLike(keyPath)) {\n\t        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n\t      }\n\t      iter = getIterator(Iterable(keyPath));\n\t    }\n\t    return iter;\n\t  }\n\t\n\t  createClass(Record, KeyedCollection);\n\t\n\t    function Record(defaultValues, name) {\n\t      var hasInitialized;\n\t\n\t      var RecordType = function Record(values) {\n\t        if (values instanceof RecordType) {\n\t          return values;\n\t        }\n\t        if (!(this instanceof RecordType)) {\n\t          return new RecordType(values);\n\t        }\n\t        if (!hasInitialized) {\n\t          hasInitialized = true;\n\t          var keys = Object.keys(defaultValues);\n\t          setProps(RecordTypePrototype, keys);\n\t          RecordTypePrototype.size = keys.length;\n\t          RecordTypePrototype._name = name;\n\t          RecordTypePrototype._keys = keys;\n\t          RecordTypePrototype._defaultValues = defaultValues;\n\t        }\n\t        this._map = Map(values);\n\t      };\n\t\n\t      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n\t      RecordTypePrototype.constructor = RecordType;\n\t\n\t      return RecordType;\n\t    }\n\t\n\t    Record.prototype.toString = function() {\n\t      return this.__toString(recordName(this) + ' {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Record.prototype.has = function(k) {\n\t      return this._defaultValues.hasOwnProperty(k);\n\t    };\n\t\n\t    Record.prototype.get = function(k, notSetValue) {\n\t      if (!this.has(k)) {\n\t        return notSetValue;\n\t      }\n\t      var defaultVal = this._defaultValues[k];\n\t      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Record.prototype.clear = function() {\n\t      if (this.__ownerID) {\n\t        this._map && this._map.clear();\n\t        return this;\n\t      }\n\t      var RecordType = this.constructor;\n\t      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n\t    };\n\t\n\t    Record.prototype.set = function(k, v) {\n\t      if (!this.has(k)) {\n\t        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n\t      }\n\t      if (this._map && !this._map.has(k)) {\n\t        var defaultVal = this._defaultValues[k];\n\t        if (v === defaultVal) {\n\t          return this;\n\t        }\n\t      }\n\t      var newMap = this._map && this._map.set(k, v);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.remove = function(k) {\n\t      if (!this.has(k)) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.remove(k);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n\t    };\n\t\n\t    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n\t    };\n\t\n\t    Record.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap, ownerID);\n\t    };\n\t\n\t\n\t  var RecordPrototype = Record.prototype;\n\t  RecordPrototype[DELETE] = RecordPrototype.remove;\n\t  RecordPrototype.deleteIn =\n\t  RecordPrototype.removeIn = MapPrototype.removeIn;\n\t  RecordPrototype.merge = MapPrototype.merge;\n\t  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n\t  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n\t  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n\t  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n\t  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  RecordPrototype.setIn = MapPrototype.setIn;\n\t  RecordPrototype.update = MapPrototype.update;\n\t  RecordPrototype.updateIn = MapPrototype.updateIn;\n\t  RecordPrototype.withMutations = MapPrototype.withMutations;\n\t  RecordPrototype.asMutable = MapPrototype.asMutable;\n\t  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t\n\t  function makeRecord(likeRecord, map, ownerID) {\n\t    var record = Object.create(Object.getPrototypeOf(likeRecord));\n\t    record._map = map;\n\t    record.__ownerID = ownerID;\n\t    return record;\n\t  }\n\t\n\t  function recordName(record) {\n\t    return record._name || record.constructor.name || 'Record';\n\t  }\n\t\n\t  function setProps(prototype, names) {\n\t    try {\n\t      names.forEach(setProp.bind(undefined, prototype));\n\t    } catch (error) {\n\t      // Object.defineProperty failed. Probably IE8.\n\t    }\n\t  }\n\t\n\t  function setProp(prototype, name) {\n\t    Object.defineProperty(prototype, name, {\n\t      get: function() {\n\t        return this.get(name);\n\t      },\n\t      set: function(value) {\n\t        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n\t        this.set(name, value);\n\t      }\n\t    });\n\t  }\n\t\n\t  createClass(Set, SetCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Set(value) {\n\t      return value === null || value === undefined ? emptySet() :\n\t        isSet(value) && !isOrdered(value) ? value :\n\t        emptySet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    Set.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Set.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    Set.prototype.toString = function() {\n\t      return this.__toString('Set {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Set.prototype.has = function(value) {\n\t      return this._map.has(value);\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Set.prototype.add = function(value) {\n\t      return updateSet(this, this._map.set(value, true));\n\t    };\n\t\n\t    Set.prototype.remove = function(value) {\n\t      return updateSet(this, this._map.remove(value));\n\t    };\n\t\n\t    Set.prototype.clear = function() {\n\t      return updateSet(this, this._map.clear());\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n\t      iters = iters.filter(function(x ) {return x.size !== 0});\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n\t        return this.constructor(iters[0]);\n\t      }\n\t      return this.withMutations(function(set ) {\n\t        for (var ii = 0; ii < iters.length; ii++) {\n\t          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n\t        }\n\t      });\n\t    };\n\t\n\t    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (iters.some(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.merge = function() {\n\t      return this.union.apply(this, arguments);\n\t    };\n\t\n\t    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.union.apply(this, iters);\n\t    };\n\t\n\t    Set.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator));\n\t    };\n\t\n\t    Set.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    Set.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n\t    };\n\t\n\t    Set.prototype.__iterator = function(type, reverse) {\n\t      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n\t    };\n\t\n\t    Set.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return this.__make(newMap, ownerID);\n\t    };\n\t\n\t\n\t  function isSet(maybeSet) {\n\t    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n\t  }\n\t\n\t  Set.isSet = isSet;\n\t\n\t  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\t\n\t  var SetPrototype = Set.prototype;\n\t  SetPrototype[IS_SET_SENTINEL] = true;\n\t  SetPrototype[DELETE] = SetPrototype.remove;\n\t  SetPrototype.mergeDeep = SetPrototype.merge;\n\t  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n\t  SetPrototype.withMutations = MapPrototype.withMutations;\n\t  SetPrototype.asMutable = MapPrototype.asMutable;\n\t  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t  SetPrototype.__empty = emptySet;\n\t  SetPrototype.__make = makeSet;\n\t\n\t  function updateSet(set, newMap) {\n\t    if (set.__ownerID) {\n\t      set.size = newMap.size;\n\t      set._map = newMap;\n\t      return set;\n\t    }\n\t    return newMap === set._map ? set :\n\t      newMap.size === 0 ? set.__empty() :\n\t      set.__make(newMap);\n\t  }\n\t\n\t  function makeSet(map, ownerID) {\n\t    var set = Object.create(SetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_SET;\n\t  function emptySet() {\n\t    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n\t  }\n\t\n\t  createClass(OrderedSet, Set);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedSet(value) {\n\t      return value === null || value === undefined ? emptyOrderedSet() :\n\t        isOrderedSet(value) ? value :\n\t        emptyOrderedSet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    OrderedSet.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedSet.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    OrderedSet.prototype.toString = function() {\n\t      return this.__toString('OrderedSet {', '}');\n\t    };\n\t\n\t\n\t  function isOrderedSet(maybeOrderedSet) {\n\t    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n\t  }\n\t\n\t  OrderedSet.isOrderedSet = isOrderedSet;\n\t\n\t  var OrderedSetPrototype = OrderedSet.prototype;\n\t  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  OrderedSetPrototype.__empty = emptyOrderedSet;\n\t  OrderedSetPrototype.__make = makeOrderedSet;\n\t\n\t  function makeOrderedSet(map, ownerID) {\n\t    var set = Object.create(OrderedSetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_ORDERED_SET;\n\t  function emptyOrderedSet() {\n\t    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n\t  }\n\t\n\t  createClass(Stack, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Stack(value) {\n\t      return value === null || value === undefined ? emptyStack() :\n\t        isStack(value) ? value :\n\t        emptyStack().unshiftAll(value);\n\t    }\n\t\n\t    Stack.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Stack.prototype.toString = function() {\n\t      return this.__toString('Stack [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Stack.prototype.get = function(index, notSetValue) {\n\t      var head = this._head;\n\t      index = wrapIndex(this, index);\n\t      while (head && index--) {\n\t        head = head.next;\n\t      }\n\t      return head ? head.value : notSetValue;\n\t    };\n\t\n\t    Stack.prototype.peek = function() {\n\t      return this._head && this._head.value;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Stack.prototype.push = function(/*...values*/) {\n\t      if (arguments.length === 0) {\n\t        return this;\n\t      }\n\t      var newSize = this.size + arguments.length;\n\t      var head = this._head;\n\t      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n\t        head = {\n\t          value: arguments[ii],\n\t          next: head\n\t        };\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pushAll = function(iter) {\n\t      iter = IndexedIterable(iter);\n\t      if (iter.size === 0) {\n\t        return this;\n\t      }\n\t      assertNotInfinite(iter.size);\n\t      var newSize = this.size;\n\t      var head = this._head;\n\t      iter.reverse().forEach(function(value ) {\n\t        newSize++;\n\t        head = {\n\t          value: value,\n\t          next: head\n\t        };\n\t      });\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pop = function() {\n\t      return this.slice(1);\n\t    };\n\t\n\t    Stack.prototype.unshift = function(/*...values*/) {\n\t      return this.push.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.unshiftAll = function(iter) {\n\t      return this.pushAll(iter);\n\t    };\n\t\n\t    Stack.prototype.shift = function() {\n\t      return this.pop.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._head = undefined;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyStack();\n\t    };\n\t\n\t    Stack.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      var resolvedBegin = resolveBegin(begin, this.size);\n\t      var resolvedEnd = resolveEnd(end, this.size);\n\t      if (resolvedEnd !== this.size) {\n\t        // super.slice(begin, end);\n\t        return IndexedCollection.prototype.slice.call(this, begin, end);\n\t      }\n\t      var newSize = this.size - resolvedBegin;\n\t      var head = this._head;\n\t      while (resolvedBegin--) {\n\t        head = head.next;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Stack.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeStack(this.size, this._head, ownerID, this.__hash);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    Stack.prototype.__iterate = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterate(fn);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      while (node) {\n\t        if (fn(node.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t        node = node.next;\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    Stack.prototype.__iterator = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterator(type);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      return new Iterator(function()  {\n\t        if (node) {\n\t          var value = node.value;\n\t          node = node.next;\n\t          return iteratorValue(type, iterations++, value);\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    };\n\t\n\t\n\t  function isStack(maybeStack) {\n\t    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n\t  }\n\t\n\t  Stack.isStack = isStack;\n\t\n\t  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\t\n\t  var StackPrototype = Stack.prototype;\n\t  StackPrototype[IS_STACK_SENTINEL] = true;\n\t  StackPrototype.withMutations = MapPrototype.withMutations;\n\t  StackPrototype.asMutable = MapPrototype.asMutable;\n\t  StackPrototype.asImmutable = MapPrototype.asImmutable;\n\t  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t  function makeStack(size, head, ownerID, hash) {\n\t    var map = Object.create(StackPrototype);\n\t    map.size = size;\n\t    map._head = head;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_STACK;\n\t  function emptyStack() {\n\t    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n\t  }\n\t\n\t  /**\n\t   * Contributes additional methods to a constructor\n\t   */\n\t  function mixin(ctor, methods) {\n\t    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n\t    Object.keys(methods).forEach(keyCopier);\n\t    Object.getOwnPropertySymbols &&\n\t      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n\t    return ctor;\n\t  }\n\t\n\t  Iterable.Iterator = Iterator;\n\t\n\t  mixin(Iterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toArray: function() {\n\t      assertNotInfinite(this.size);\n\t      var array = new Array(this.size || 0);\n\t      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n\t      return array;\n\t    },\n\t\n\t    toIndexedSeq: function() {\n\t      return new ToIndexedSequence(this);\n\t    },\n\t\n\t    toJS: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toJSON: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, true);\n\t    },\n\t\n\t    toMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Map(this.toKeyedSeq());\n\t    },\n\t\n\t    toObject: function() {\n\t      assertNotInfinite(this.size);\n\t      var object = {};\n\t      this.__iterate(function(v, k)  { object[k] = v; });\n\t      return object;\n\t    },\n\t\n\t    toOrderedMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedMap(this.toKeyedSeq());\n\t    },\n\t\n\t    toOrderedSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Set(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSetSeq: function() {\n\t      return new ToSetSequence(this);\n\t    },\n\t\n\t    toSeq: function() {\n\t      return isIndexed(this) ? this.toIndexedSeq() :\n\t        isKeyed(this) ? this.toKeyedSeq() :\n\t        this.toSetSeq();\n\t    },\n\t\n\t    toStack: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Stack(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toList: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return List(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t\n\t    // ### Common JavaScript methods and properties\n\t\n\t    toString: function() {\n\t      return '[Iterable]';\n\t    },\n\t\n\t    __toString: function(head, tail) {\n\t      if (this.size === 0) {\n\t        return head + tail;\n\t      }\n\t      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    concat: function() {var values = SLICE$0.call(arguments, 0);\n\t      return reify(this, concatFactory(this, values));\n\t    },\n\t\n\t    includes: function(searchValue) {\n\t      return this.some(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    entries: function() {\n\t      return this.__iterator(ITERATE_ENTRIES);\n\t    },\n\t\n\t    every: function(predicate, context) {\n\t      assertNotInfinite(this.size);\n\t      var returnValue = true;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (!predicate.call(context, v, k, c)) {\n\t          returnValue = false;\n\t          return false;\n\t        }\n\t      });\n\t      return returnValue;\n\t    },\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, true));\n\t    },\n\t\n\t    find: function(predicate, context, notSetValue) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[1] : notSetValue;\n\t    },\n\t\n\t    forEach: function(sideEffect, context) {\n\t      assertNotInfinite(this.size);\n\t      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n\t    },\n\t\n\t    join: function(separator) {\n\t      assertNotInfinite(this.size);\n\t      separator = separator !== undefined ? '' + separator : ',';\n\t      var joined = '';\n\t      var isFirst = true;\n\t      this.__iterate(function(v ) {\n\t        isFirst ? (isFirst = false) : (joined += separator);\n\t        joined += v !== null && v !== undefined ? v.toString() : '';\n\t      });\n\t      return joined;\n\t    },\n\t\n\t    keys: function() {\n\t      return this.__iterator(ITERATE_KEYS);\n\t    },\n\t\n\t    map: function(mapper, context) {\n\t      return reify(this, mapFactory(this, mapper, context));\n\t    },\n\t\n\t    reduce: function(reducer, initialReduction, context) {\n\t      assertNotInfinite(this.size);\n\t      var reduction;\n\t      var useFirst;\n\t      if (arguments.length < 2) {\n\t        useFirst = true;\n\t      } else {\n\t        reduction = initialReduction;\n\t      }\n\t      this.__iterate(function(v, k, c)  {\n\t        if (useFirst) {\n\t          useFirst = false;\n\t          reduction = v;\n\t        } else {\n\t          reduction = reducer.call(context, reduction, v, k, c);\n\t        }\n\t      });\n\t      return reduction;\n\t    },\n\t\n\t    reduceRight: function(reducer, initialReduction, context) {\n\t      var reversed = this.toKeyedSeq().reverse();\n\t      return reversed.reduce.apply(reversed, arguments);\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, true));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, true));\n\t    },\n\t\n\t    some: function(predicate, context) {\n\t      return !this.every(not(predicate), context);\n\t    },\n\t\n\t    sort: function(comparator) {\n\t      return reify(this, sortFactory(this, comparator));\n\t    },\n\t\n\t    values: function() {\n\t      return this.__iterator(ITERATE_VALUES);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    butLast: function() {\n\t      return this.slice(0, -1);\n\t    },\n\t\n\t    isEmpty: function() {\n\t      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n\t    },\n\t\n\t    count: function(predicate, context) {\n\t      return ensureSize(\n\t        predicate ? this.toSeq().filter(predicate, context) : this\n\t      );\n\t    },\n\t\n\t    countBy: function(grouper, context) {\n\t      return countByFactory(this, grouper, context);\n\t    },\n\t\n\t    equals: function(other) {\n\t      return deepEqual(this, other);\n\t    },\n\t\n\t    entrySeq: function() {\n\t      var iterable = this;\n\t      if (iterable._cache) {\n\t        // We cache as an entries array, so we can just return the cache!\n\t        return new ArraySeq(iterable._cache);\n\t      }\n\t      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n\t      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n\t      return entriesSequence;\n\t    },\n\t\n\t    filterNot: function(predicate, context) {\n\t      return this.filter(not(predicate), context);\n\t    },\n\t\n\t    findEntry: function(predicate, context, notSetValue) {\n\t      var found = notSetValue;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          found = [k, v];\n\t          return false;\n\t        }\n\t      });\n\t      return found;\n\t    },\n\t\n\t    findKey: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry && entry[0];\n\t    },\n\t\n\t    findLast: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastEntry: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastKey: function(predicate, context) {\n\t      return this.toKeyedSeq().reverse().findKey(predicate, context);\n\t    },\n\t\n\t    first: function() {\n\t      return this.find(returnTrue);\n\t    },\n\t\n\t    flatMap: function(mapper, context) {\n\t      return reify(this, flatMapFactory(this, mapper, context));\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, true));\n\t    },\n\t\n\t    fromEntrySeq: function() {\n\t      return new FromEntriesSequence(this);\n\t    },\n\t\n\t    get: function(searchKey, notSetValue) {\n\t      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n\t    },\n\t\n\t    getIn: function(searchKeyPath, notSetValue) {\n\t      var nested = this;\n\t      // Note: in an ES6 environment, we would prefer:\n\t      // for (var key of searchKeyPath) {\n\t      var iter = forceIterator(searchKeyPath);\n\t      var step;\n\t      while (!(step = iter.next()).done) {\n\t        var key = step.value;\n\t        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n\t        if (nested === NOT_SET) {\n\t          return notSetValue;\n\t        }\n\t      }\n\t      return nested;\n\t    },\n\t\n\t    groupBy: function(grouper, context) {\n\t      return groupByFactory(this, grouper, context);\n\t    },\n\t\n\t    has: function(searchKey) {\n\t      return this.get(searchKey, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    hasIn: function(searchKeyPath) {\n\t      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    isSubset: function(iter) {\n\t      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n\t      return this.every(function(value ) {return iter.includes(value)});\n\t    },\n\t\n\t    isSuperset: function(iter) {\n\t      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n\t      return iter.isSubset(this);\n\t    },\n\t\n\t    keyOf: function(searchValue) {\n\t      return this.findKey(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    keySeq: function() {\n\t      return this.toSeq().map(keyMapper).toIndexedSeq();\n\t    },\n\t\n\t    last: function() {\n\t      return this.toSeq().reverse().first();\n\t    },\n\t\n\t    lastKeyOf: function(searchValue) {\n\t      return this.toKeyedSeq().reverse().keyOf(searchValue);\n\t    },\n\t\n\t    max: function(comparator) {\n\t      return maxFactory(this, comparator);\n\t    },\n\t\n\t    maxBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator, mapper);\n\t    },\n\t\n\t    min: function(comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n\t    },\n\t\n\t    minBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n\t    },\n\t\n\t    rest: function() {\n\t      return this.slice(1);\n\t    },\n\t\n\t    skip: function(amount) {\n\t      return this.slice(Math.max(0, amount));\n\t    },\n\t\n\t    skipLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, true));\n\t    },\n\t\n\t    skipUntil: function(predicate, context) {\n\t      return this.skipWhile(not(predicate), context);\n\t    },\n\t\n\t    sortBy: function(mapper, comparator) {\n\t      return reify(this, sortFactory(this, comparator, mapper));\n\t    },\n\t\n\t    take: function(amount) {\n\t      return this.slice(0, Math.max(0, amount));\n\t    },\n\t\n\t    takeLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().take(amount).reverse());\n\t    },\n\t\n\t    takeWhile: function(predicate, context) {\n\t      return reify(this, takeWhileFactory(this, predicate, context));\n\t    },\n\t\n\t    takeUntil: function(predicate, context) {\n\t      return this.takeWhile(not(predicate), context);\n\t    },\n\t\n\t    valueSeq: function() {\n\t      return this.toIndexedSeq();\n\t    },\n\t\n\t\n\t    // ### Hashable Object\n\t\n\t    hashCode: function() {\n\t      return this.__hash || (this.__hash = hashIterable(this));\n\t    }\n\t\n\t\n\t    // ### Internal\n\t\n\t    // abstract __iterate(fn, reverse)\n\t\n\t    // abstract __iterator(type, reverse)\n\t  });\n\t\n\t  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  var IterablePrototype = Iterable.prototype;\n\t  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n\t  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n\t  IterablePrototype.__toJS = IterablePrototype.toArray;\n\t  IterablePrototype.__toStringMapper = quoteString;\n\t  IterablePrototype.inspect =\n\t  IterablePrototype.toSource = function() { return this.toString(); };\n\t  IterablePrototype.chain = IterablePrototype.flatMap;\n\t  IterablePrototype.contains = IterablePrototype.includes;\n\t\n\t  mixin(KeyedIterable, {\n\t\n\t    // ### More sequential methods\n\t\n\t    flip: function() {\n\t      return reify(this, flipFactory(this));\n\t    },\n\t\n\t    mapEntries: function(mapper, context) {var this$0 = this;\n\t      var iterations = 0;\n\t      return reify(this,\n\t        this.toSeq().map(\n\t          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n\t        ).fromEntrySeq()\n\t      );\n\t    },\n\t\n\t    mapKeys: function(mapper, context) {var this$0 = this;\n\t      return reify(this,\n\t        this.toSeq().flip().map(\n\t          function(k, v)  {return mapper.call(context, k, v, this$0)}\n\t        ).flip()\n\t      );\n\t    }\n\t\n\t  });\n\t\n\t  var KeyedIterablePrototype = KeyedIterable.prototype;\n\t  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n\t  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n\t  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n\t  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\t\n\t\n\t\n\t  mixin(IndexedIterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, false);\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, false));\n\t    },\n\t\n\t    findIndex: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    indexOf: function(searchValue) {\n\t      var key = this.keyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    lastIndexOf: function(searchValue) {\n\t      var key = this.lastKeyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, false));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, false));\n\t    },\n\t\n\t    splice: function(index, removeNum /*, ...values*/) {\n\t      var numArgs = arguments.length;\n\t      removeNum = Math.max(removeNum | 0, 0);\n\t      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n\t        return this;\n\t      }\n\t      // If index is negative, it should resolve relative to the size of the\n\t      // collection. However size may be expensive to compute if not cached, so\n\t      // only call count() if the number is in fact negative.\n\t      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n\t      var spliced = this.slice(0, index);\n\t      return reify(\n\t        this,\n\t        numArgs === 1 ?\n\t          spliced :\n\t          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n\t      );\n\t    },\n\t\n\t\n\t    // ### More collection methods\n\t\n\t    findLastIndex: function(predicate, context) {\n\t      var entry = this.findLastEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    first: function() {\n\t      return this.get(0);\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, false));\n\t    },\n\t\n\t    get: function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      return (index < 0 || (this.size === Infinity ||\n\t          (this.size !== undefined && index > this.size))) ?\n\t        notSetValue :\n\t        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n\t    },\n\t\n\t    has: function(index) {\n\t      index = wrapIndex(this, index);\n\t      return index >= 0 && (this.size !== undefined ?\n\t        this.size === Infinity || index < this.size :\n\t        this.indexOf(index) !== -1\n\t      );\n\t    },\n\t\n\t    interpose: function(separator) {\n\t      return reify(this, interposeFactory(this, separator));\n\t    },\n\t\n\t    interleave: function(/*...iterables*/) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n\t      var interleaved = zipped.flatten(true);\n\t      if (zipped.size) {\n\t        interleaved.size = zipped.size * iterables.length;\n\t      }\n\t      return reify(this, interleaved);\n\t    },\n\t\n\t    keySeq: function() {\n\t      return Range(0, this.size);\n\t    },\n\t\n\t    last: function() {\n\t      return this.get(-1);\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, false));\n\t    },\n\t\n\t    zip: function(/*, ...iterables */) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n\t    },\n\t\n\t    zipWith: function(zipper/*, ...iterables */) {\n\t      var iterables = arrCopy(arguments);\n\t      iterables[0] = this;\n\t      return reify(this, zipWithFactory(this, zipper, iterables));\n\t    }\n\t\n\t  });\n\t\n\t  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n\t  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t\n\t  mixin(SetIterable, {\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    get: function(value, notSetValue) {\n\t      return this.has(value) ? value : notSetValue;\n\t    },\n\t\n\t    includes: function(value) {\n\t      return this.has(value);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    keySeq: function() {\n\t      return this.valueSeq();\n\t    }\n\t\n\t  });\n\t\n\t  SetIterable.prototype.has = IterablePrototype.includes;\n\t  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\t\n\t\n\t  // Mixin subclasses\n\t\n\t  mixin(KeyedSeq, KeyedIterable.prototype);\n\t  mixin(IndexedSeq, IndexedIterable.prototype);\n\t  mixin(SetSeq, SetIterable.prototype);\n\t\n\t  mixin(KeyedCollection, KeyedIterable.prototype);\n\t  mixin(IndexedCollection, IndexedIterable.prototype);\n\t  mixin(SetCollection, SetIterable.prototype);\n\t\n\t\n\t  // #pragma Helper functions\n\t\n\t  function keyMapper(v, k) {\n\t    return k;\n\t  }\n\t\n\t  function entryMapper(v, k) {\n\t    return [k, v];\n\t  }\n\t\n\t  function not(predicate) {\n\t    return function() {\n\t      return !predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function neg(predicate) {\n\t    return function() {\n\t      return -predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function quoteString(value) {\n\t    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n\t  }\n\t\n\t  function defaultZipper() {\n\t    return arrCopy(arguments);\n\t  }\n\t\n\t  function defaultNegComparator(a, b) {\n\t    return a < b ? 1 : a > b ? -1 : 0;\n\t  }\n\t\n\t  function hashIterable(iterable) {\n\t    if (iterable.size === Infinity) {\n\t      return 0;\n\t    }\n\t    var ordered = isOrdered(iterable);\n\t    var keyed = isKeyed(iterable);\n\t    var h = ordered ? 1 : 0;\n\t    var size = iterable.__iterate(\n\t      keyed ?\n\t        ordered ?\n\t          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n\t          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n\t        ordered ?\n\t          function(v ) { h = 31 * h + hash(v) | 0; } :\n\t          function(v ) { h = h + hash(v) | 0; }\n\t    );\n\t    return murmurHashOfSize(size, h);\n\t  }\n\t\n\t  function murmurHashOfSize(size, h) {\n\t    h = imul(h, 0xCC9E2D51);\n\t    h = imul(h << 15 | h >>> -15, 0x1B873593);\n\t    h = imul(h << 13 | h >>> -13, 5);\n\t    h = (h + 0xE6546B64 | 0) ^ size;\n\t    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n\t    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n\t    h = smi(h ^ h >>> 16);\n\t    return h;\n\t  }\n\t\n\t  function hashMerge(a, b) {\n\t    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n\t  }\n\t\n\t  var Immutable = {\n\t\n\t    Iterable: Iterable,\n\t\n\t    Seq: Seq,\n\t    Collection: Collection,\n\t    Map: Map,\n\t    OrderedMap: OrderedMap,\n\t    List: List,\n\t    Stack: Stack,\n\t    Set: Set,\n\t    OrderedSet: OrderedSet,\n\t\n\t    Record: Record,\n\t    Range: Range,\n\t    Repeat: Repeat,\n\t\n\t    is: is,\n\t    fromJS: fromJS\n\t\n\t  };\n\t\n\t  return Immutable;\n\t\n\t}));\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = downloadState;\n\texports.downloadBegin = downloadBegin;\n\texports.downloadSuccess = downloadSuccess;\n\texports.downloadError = downloadError;\n\texports.download = download;\n\t\n\tvar _immutable = __webpack_require__(2);\n\t\n\tvar _networks = __webpack_require__(1);\n\t\n\tvar DOWNLOAD_BEGIN = 'DOWNLOAD_BEGIN';\n\tvar DOWNLOAD_SUCCESS = 'DOWNLOAD_SUCCESS';\n\tvar DOWNLOAD_ERROR = 'DOWNLOAD_ERROR';\n\t\n\tvar defaultState = (0, _immutable.Map)({\n\t  downloading: false,\n\t  error: null\n\t});\n\t\n\tfunction downloadState() {\n\t  var state = arguments.length <= 0 || arguments[0] === undefined ? defaultState : arguments[0];\n\t  var action = arguments[1];\n\t\n\t  switch (action.type) {\n\t    case DOWNLOAD_BEGIN:\n\t      return state.merge({\n\t        downloading: true\n\t      });\n\t    case DOWNLOAD_SUCCESS:\n\t      return state.merge({\n\t        downloading: false\n\t      });\n\t    case DOWNLOAD_ERROR:\n\t      return state.merge({\n\t        downloading: false,\n\t        error: action.error\n\t      });\n\t    default:\n\t      return state;\n\t  }\n\t}\n\t\n\t/*Set the downloading flag*/\n\tfunction downloadBegin() {\n\t  return { type: DOWNLOAD_BEGIN };\n\t}\n\t\n\t/*Send network to the networks store and remove the downloading flag*/\n\tfunction downloadSuccess(networkUrl, data) {\n\t  return function (dispatch) {\n\t    dispatch((0, _networks.addNetwork)(networkUrl, data));\n\t    dispatch({ type: DOWNLOAD_SUCCESS });\n\t  };\n\t}\n\t\n\t/*Set an error field if a download did not complete successfully*/\n\tfunction downloadError(error) {\n\t  return { type: DOWNLOAD_ERROR, error: error };\n\t}\n\t\n\t/*Download the network from the given url*/\n\tfunction download(networkUrl) {\n\t  var headers = {\n\t    'Accept': 'application/json',\n\t    'Content-Type': 'application/json'\n\t  };\n\t  return function (dispatch) {\n\t    return fetch(networkUrl, {\n\t      method: 'get',\n\t      headers: headers\n\t    }).then(function (response) {\n\t      if (response.status >= 200 && response.status < 300) {\n\t        response.json().then(function (data) {\n\t          return dispatch(downloadSuccess(networkUrl, data));\n\t        });\n\t      } else {\n\t        var error = new Error(response);\n\t        error.response = response;\n\t        dispatch(downloadError(error));\n\t        throw error;\n\t      }\n\t    }).catch(function (error) {\n\t      window.alert('Network ' + networkUrl + ' download failed, reason:', error);\n\t    });\n\t  };\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** CyNetworkStore.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap afe6e04c25fee54549e3\n **/","import networks, * as networkActions from './store/networks'\nimport networkDownload, * as networkDownloadActions from './store/networkDownload'\n\nconst storeName = 'cy_network'\nconst store = {networks, networkDownload}\n\nexport {\n  storeName,\n  store,\n  networkActions,\n  networkDownloadActions\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CyNetworkStore.js\n **/","import {Map} from 'immutable'\n\nconst ADD_NETWORK = 'ADD_NETWORK'\nconst DELETE_NETWORK = 'DELETE_NETWORK'\n\nconst defaultState = Map({})\n\nexport default function networkStore(state = defaultState, action) {\n  switch (action.type) {\n    case ADD_NETWORK:\n      return state.set(action.networkId, Map(action.data))\n    case DELETE_NETWORK:\n      return state.delete(action.networkId)\n    default:\n      return state\n  }\n}\n\nexport function addNetwork(networkId, data) {\n  return {\n    type: ADD_NETWORK,\n    networkId,\n    data\n  }\n}\n\nexport function deleteNetwork(networkId) {\n  return {\n    type: DELETE_NETWORK,\n    networkId\n  }\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/store/networks.js\n **/","/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Immutable = factory());\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/immutable/dist/immutable.js\n ** module id = 2\n ** module chunks = 0\n **/","import {Map} from 'immutable'\n\nimport {addNetwork} from './networks'\n\nconst DOWNLOAD_BEGIN = 'DOWNLOAD_BEGIN'\nconst DOWNLOAD_SUCCESS = 'DOWNLOAD_SUCCESS'\nconst DOWNLOAD_ERROR = 'DOWNLOAD_ERROR'\n\nconst defaultState = Map({\n  downloading: false,\n  error: null\n})\n\nexport default function downloadState(state = defaultState, action) {\n  switch (action.type) {\n    case DOWNLOAD_BEGIN:\n      return state.merge({\n        downloading: true\n      })\n    case DOWNLOAD_SUCCESS:\n      return state.merge({\n        downloading: false\n      })\n    case DOWNLOAD_ERROR:\n      return state.merge({\n        downloading: false,\n        error: action.error\n      })\n    default:\n      return state\n  }\n}\n\n/*Set the downloading flag*/\nexport function downloadBegin() {\n  return {type: DOWNLOAD_BEGIN}\n}\n\n/*Send network to the networks store and remove the downloading flag*/\nexport function downloadSuccess(networkUrl, data) {\n  return dispatch => {\n    dispatch(addNetwork(networkUrl, data))\n    dispatch({type: DOWNLOAD_SUCCESS})\n  }\n}\n\n/*Set an error field if a download did not complete successfully*/\nexport function downloadError(error) {\n  return {type: DOWNLOAD_ERROR, error}\n}\n\n/*Download the network from the given url*/\nexport function download(networkUrl) {\n  var headers = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n  return dispatch =>\n    fetch(networkUrl, {\n      method: 'get',\n      headers: headers\n    }).then(response => {\n      if (response.status >= 200 && response.status < 300) {\n        response.json().then((data) => dispatch(downloadSuccess(networkUrl, data)))\n      } else {\n        const error = new Error(response)\n        error.response = response\n        dispatch(downloadError(error))\n        throw error\n      }\n    }).catch(error => {\n      window.alert('Network ' + networkUrl + ' download failed, reason:', error)\n    })\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/store/networkDownload.js\n **/"],"sourceRoot":""}